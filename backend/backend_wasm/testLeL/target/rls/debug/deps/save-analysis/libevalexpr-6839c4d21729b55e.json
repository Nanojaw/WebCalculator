{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0","program":"C:\\Users\\test9\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","evalexpr","--edition=2018","C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=6839c4d21729b55e","-C","extra-filename=-6839c4d21729b55e","--out-dir","c:\\Stuff\\GitRepos\\WebCalculator\\backend\\backend_wasm\\testLeL\\target\\rls\\debug\\deps","-L","dependency=c:\\Stuff\\GitRepos\\WebCalculator\\backend\\backend_wasm\\testLeL\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\test9\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Stuff\\GitRepos\\WebCalculator\\backend\\backend_wasm\\testLeL\\target\\rls\\debug\\deps\\libevalexpr-6839c4d21729b55e.rmeta"},"prelude":{"crate_id":{"name":"evalexpr","disambiguator":[8093671888207773314,0]},"crate_root":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src","external_crates":[{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7379719041391505039,0]}},{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5226548339696486402,0]}},{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15782588708828798436,0]}},{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11258588358156983047,0]}},{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6811839233127289238,0]}},{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6798478037195512723,0]}},{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12572258325454906649,0]}},{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[598470195457823820,0]}},{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7285820039251336650,0]}},{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15004074270013699283,0]}},{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[6568562326383462027,0]}},{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[7532148157145861684,0]}},{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[15660406440960571571,0]}}],"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":0,"byte_end":26743,"line_start":1,"line_end":553,"column_start":1,"column_end":11}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26223,"byte_end":26230,"line_start":532,"line_end":532,"column_start":9,"column_end":16},"alias_span":null,"name":"Context","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26232,"byte_end":26259,"line_start":532,"line_end":532,"column_start":18,"column_end":45},"alias_span":null,"name":"ContextWithMutableFunctions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26261,"byte_end":26288,"line_start":532,"line_end":532,"column_start":47,"column_end":74},"alias_span":null,"name":"ContextWithMutableVariables","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":635},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26290,"byte_end":26302,"line_start":532,"line_end":532,"column_start":76,"column_end":88},"alias_span":null,"name":"EmptyContext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":636},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26290,"byte_end":26302,"line_start":532,"line_end":532,"column_start":76,"column_end":88},"alias_span":null,"name":"EmptyContext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":641},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26312,"byte_end":26326,"line_start":533,"line_end":533,"column_start":9,"column_end":23},"alias_span":null,"name":"HashMapContext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":650},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26347,"byte_end":26360,"line_start":535,"line_end":535,"column_start":13,"column_end":26},"alias_span":null,"name":"EvalexprError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26362,"byte_end":26376,"line_start":535,"line_end":535,"column_start":28,"column_end":42},"alias_span":null,"name":"EvalexprResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26393,"byte_end":26401,"line_start":536,"line_end":536,"column_start":15,"column_end":23},"alias_span":null,"name":"Function","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26418,"byte_end":26419,"line_start":537,"line_end":537,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":767},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26435,"byte_end":26443,"line_start":538,"line_end":538,"column_start":15,"column_end":23},"alias_span":null,"name":"Operator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":918},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26456,"byte_end":26468,"line_start":539,"line_end":539,"column_start":12,"column_end":24},"alias_span":null,"name":"PartialToken","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":959},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26480,"byte_end":26484,"line_start":540,"line_end":540,"column_start":11,"column_end":15},"alias_span":null,"name":"Node","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":970},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26510,"byte_end":26519,"line_start":541,"line_end":541,"column_start":25,"column_end":34},"alias_span":null,"name":"ValueType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":601},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26521,"byte_end":26530,"line_start":541,"line_end":541,"column_start":36,"column_end":45},"alias_span":null,"name":"EmptyType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":599},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26532,"byte_end":26541,"line_start":541,"line_end":541,"column_start":47,"column_end":56},"alias_span":null,"name":"FloatType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":598},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26543,"byte_end":26550,"line_start":541,"line_end":541,"column_start":58,"column_end":65},"alias_span":null,"name":"IntType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":600},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26552,"byte_end":26561,"line_start":541,"line_end":541,"column_start":67,"column_end":76},"alias_span":null,"name":"TupleType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":994},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26563,"byte_end":26568,"line_start":541,"line_end":541,"column_start":78,"column_end":83},"alias_span":null,"name":"Value","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":602},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26570,"byte_end":26581,"line_start":541,"line_end":541,"column_start":85,"column_end":96},"alias_span":null,"name":"EMPTY_VALUE","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":0,"byte_end":26743,"line_start":1,"line_end":553,"column_start":1,"column_end":11},"name":"","qualname":"::","value":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":105},{"krate":0,"index":159},{"krate":0,"index":238},{"krate":0,"index":323},{"krate":0,"index":375},{"krate":0,"index":421},{"krate":0,"index":564}],"decl_id":null,"docs":"\n ## Quickstart","sig":null,"attributes":[{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":0,"byte_end":3,"line_start":1,"line_end":1,"column_start":1,"column_end":4}},{"value":"/ ## Quickstart","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4,"byte_end":21,"line_start":2,"line_end":2,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":22,"byte_end":25,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ Add `evalexpr` as dependency to your `Cargo.toml`:","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26,"byte_end":80,"line_start":4,"line_end":4,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":81,"byte_end":84,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":85,"byte_end":96,"line_start":6,"line_end":6,"column_start":1,"column_end":12}},{"value":"/ [dependencies]","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":97,"byte_end":115,"line_start":7,"line_end":7,"column_start":1,"column_end":19}},{"value":"/ evalexpr = \"7\"","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":116,"byte_end":134,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":135,"byte_end":142,"line_start":9,"line_end":9,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":143,"byte_end":146,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Then you can use `evalexpr` to **evaluate expressions** like this:","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":147,"byte_end":217,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":218,"byte_end":221,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":222,"byte_end":233,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":234,"byte_end":254,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":255,"byte_end":258,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(eval(\"1 + 2 + 3\"), Ok(Value::from(6)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":259,"byte_end":313,"line_start":16,"line_end":16,"column_start":1,"column_end":55}},{"value":"/ // `eval` returns a variant of the `Value` enum,","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":314,"byte_end":366,"line_start":17,"line_end":17,"column_start":1,"column_end":53}},{"value":"/ // while `eval_[type]` returns the respective type directly.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":367,"byte_end":431,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"/ // Both can be used interchangeably.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":432,"byte_end":472,"line_start":19,"line_end":19,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(eval_int(\"1 + 2 + 3\"), Ok(6));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":473,"byte_end":518,"line_start":20,"line_end":20,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(eval(\"1 - 2 * 3\"), Ok(Value::from(-5)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":519,"byte_end":574,"line_start":21,"line_end":21,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(eval(\"1.0 + 2 * 3\"), Ok(Value::from(7.0)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":575,"byte_end":633,"line_start":22,"line_end":22,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(eval(\"true && 4 > 2\"), Ok(Value::from(true)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":634,"byte_end":695,"line_start":23,"line_end":23,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":696,"byte_end":703,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":704,"byte_end":707,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ You can **chain** expressions and **assign** to variables like this:","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":708,"byte_end":780,"line_start":26,"line_end":26,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":781,"byte_end":784,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":785,"byte_end":796,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":797,"byte_end":817,"line_start":29,"line_end":29,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":818,"byte_end":821,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let mut context = HashMapContext::new();","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":822,"byte_end":866,"line_start":31,"line_end":31,"column_start":1,"column_end":45}},{"value":"/ // Assign 5 to a like this","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":867,"byte_end":897,"line_start":32,"line_end":32,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(eval_empty_with_context_mut(\"a = 5\", &mut context), Ok(EMPTY_VALUE));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":898,"byte_end":982,"line_start":33,"line_end":33,"column_start":1,"column_end":85}},{"value":"/ // The HashMapContext is type safe, so this will fail now","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":983,"byte_end":1044,"line_start":34,"line_end":34,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(eval_empty_with_context_mut(\"a = 5.0\", &mut context),","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1045,"byte_end":1113,"line_start":35,"line_end":35,"column_start":1,"column_end":69}},{"value":"/            Err(EvalexprError::expected_int(Value::from(5.0))));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1114,"byte_end":1181,"line_start":36,"line_end":36,"column_start":1,"column_end":68}},{"value":"/ // We can check which value the context stores for a like this","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1182,"byte_end":1248,"line_start":37,"line_end":37,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(context.get_value(\"a\"), Some(&Value::from(5)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1249,"byte_end":1311,"line_start":38,"line_end":38,"column_start":1,"column_end":63}},{"value":"/ // And use the value in another expression like this","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1312,"byte_end":1368,"line_start":39,"line_end":39,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(eval_int_with_context_mut(\"a = a + 2; a\", &mut context), Ok(7));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1369,"byte_end":1448,"line_start":40,"line_end":40,"column_start":1,"column_end":80}},{"value":"/ // It is also possible to save a bit of typing by using an operator-assignment operator","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1449,"byte_end":1540,"line_start":41,"line_end":41,"column_start":1,"column_end":92}},{"value":"/ assert_eq!(eval_int_with_context_mut(\"a += 2; a\", &mut context), Ok(9));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1541,"byte_end":1617,"line_start":42,"line_end":42,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1618,"byte_end":1625,"line_start":43,"line_end":43,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1626,"byte_end":1629,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ And you can use **variables** and **functions** in expressions like this:","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1630,"byte_end":1707,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1708,"byte_end":1711,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1712,"byte_end":1723,"line_start":47,"line_end":47,"column_start":1,"column_end":12}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1724,"byte_end":1744,"line_start":48,"line_end":48,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1745,"byte_end":1748,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ let context = context_map! {","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1749,"byte_end":1781,"line_start":50,"line_end":50,"column_start":1,"column_end":33}},{"value":"/     \"five\" => 5,","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1782,"byte_end":1802,"line_start":51,"line_end":51,"column_start":1,"column_end":21}},{"value":"/     \"twelve\" => 12,","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1803,"byte_end":1826,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/     \"f\" => Function::new(|argument| {","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1827,"byte_end":1868,"line_start":53,"line_end":53,"column_start":1,"column_end":42}},{"value":"/         if let Ok(int) = argument.as_int() {","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1869,"byte_end":1917,"line_start":54,"line_end":54,"column_start":1,"column_end":49}},{"value":"/             Ok(Value::Int(int / 2))","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1918,"byte_end":1957,"line_start":55,"line_end":55,"column_start":1,"column_end":40}},{"value":"/         } else if let Ok(float) = argument.as_float() {","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":1958,"byte_end":2017,"line_start":56,"line_end":56,"column_start":1,"column_end":60}},{"value":"/             Ok(Value::Float(float / 2.0))","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2018,"byte_end":2063,"line_start":57,"line_end":57,"column_start":1,"column_end":46}},{"value":"/         } else {","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2064,"byte_end":2084,"line_start":58,"line_end":58,"column_start":1,"column_end":21}},{"value":"/             Err(EvalexprError::expected_number(argument.clone()))","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2085,"byte_end":2154,"line_start":59,"line_end":59,"column_start":1,"column_end":70}},{"value":"/         }","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2155,"byte_end":2168,"line_start":60,"line_end":60,"column_start":1,"column_end":14}},{"value":"/     }),","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2169,"byte_end":2180,"line_start":61,"line_end":61,"column_start":1,"column_end":12}},{"value":"/     \"avg\" => Function::new(|argument| {","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2181,"byte_end":2224,"line_start":62,"line_end":62,"column_start":1,"column_end":44}},{"value":"/         let arguments = argument.as_tuple()?;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2225,"byte_end":2274,"line_start":63,"line_end":63,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2275,"byte_end":2278,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/         if let (Value::Int(a), Value::Int(b)) = (&arguments[0], &arguments[1]) {","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2279,"byte_end":2363,"line_start":65,"line_end":65,"column_start":1,"column_end":85}},{"value":"/             Ok(Value::Int((a + b) / 2))","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2364,"byte_end":2407,"line_start":66,"line_end":66,"column_start":1,"column_end":44}},{"value":"/         } else {","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2408,"byte_end":2428,"line_start":67,"line_end":67,"column_start":1,"column_end":21}},{"value":"/             Ok(Value::Float((arguments[0].as_number()? + arguments[1].as_number()?) / 2.0))","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2429,"byte_end":2524,"line_start":68,"line_end":68,"column_start":1,"column_end":96}},{"value":"/         }","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2525,"byte_end":2538,"line_start":69,"line_end":69,"column_start":1,"column_end":14}},{"value":"/     })","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2539,"byte_end":2549,"line_start":70,"line_end":70,"column_start":1,"column_end":11}},{"value":"/ }.unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2550,"byte_end":2598,"line_start":71,"line_end":71,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2599,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(eval_with_context(\"five + 8 > f(twelve)\", &context), Ok(Value::from(true)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2603,"byte_end":2694,"line_start":73,"line_end":73,"column_start":1,"column_end":92}},{"value":"/ // `eval_with_context` returns a variant of the `Value` enum,","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2695,"byte_end":2760,"line_start":74,"line_end":74,"column_start":1,"column_end":66}},{"value":"/ // while `eval_[type]_with_context` returns the respective type directly.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2761,"byte_end":2838,"line_start":75,"line_end":75,"column_start":1,"column_end":78}},{"value":"/ // Both can be used interchangeably.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2839,"byte_end":2879,"line_start":76,"line_end":76,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(eval_boolean_with_context(\"five + 8 > f(twelve)\", &context), Ok(true));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2880,"byte_end":2966,"line_start":77,"line_end":77,"column_start":1,"column_end":87}},{"value":"/ assert_eq!(eval_with_context(\"avg(2, 4) == 3\", &context), Ok(Value::from(true)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":2967,"byte_end":3052,"line_start":78,"line_end":78,"column_start":1,"column_end":86}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3053,"byte_end":3060,"line_start":79,"line_end":79,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3061,"byte_end":3064,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ You can also **precompile** expressions like this:","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3065,"byte_end":3119,"line_start":81,"line_end":81,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3120,"byte_end":3123,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3124,"byte_end":3135,"line_start":83,"line_end":83,"column_start":1,"column_end":12}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3136,"byte_end":3156,"line_start":84,"line_end":84,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3157,"byte_end":3160,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ let precompiled = build_operator_tree(\"a * b - c > 5\").unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3161,"byte_end":3262,"line_start":86,"line_end":86,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3263,"byte_end":3266,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ let mut context = context_map! {","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3267,"byte_end":3303,"line_start":88,"line_end":88,"column_start":1,"column_end":37}},{"value":"/     \"a\" => 6,","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3304,"byte_end":3321,"line_start":89,"line_end":89,"column_start":1,"column_end":18}},{"value":"/     \"b\" => 2,","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3322,"byte_end":3339,"line_start":90,"line_end":90,"column_start":1,"column_end":18}},{"value":"/     \"c\" => 3","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3340,"byte_end":3356,"line_start":91,"line_end":91,"column_start":1,"column_end":17}},{"value":"/ }.unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3357,"byte_end":3405,"line_start":92,"line_end":92,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(precompiled.eval_with_context(&context), Ok(Value::from(true)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3406,"byte_end":3485,"line_start":93,"line_end":93,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3486,"byte_end":3489,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ context.set_value(\"c\".into(), 8.into()).unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3490,"byte_end":3576,"line_start":95,"line_end":95,"column_start":1,"column_end":87}},{"value":"/ assert_eq!(precompiled.eval_with_context(&context), Ok(Value::from(false)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3577,"byte_end":3657,"line_start":96,"line_end":96,"column_start":1,"column_end":81}},{"value":"/ // `Node::eval_with_context` returns a variant of the `Value` enum,","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3658,"byte_end":3729,"line_start":97,"line_end":97,"column_start":1,"column_end":72}},{"value":"/ // while `Node::eval_[type]_with_context` returns the respective type directly.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3730,"byte_end":3813,"line_start":98,"line_end":98,"column_start":1,"column_end":84}},{"value":"/ // Both can be used interchangeably.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3814,"byte_end":3854,"line_start":99,"line_end":99,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(precompiled.eval_boolean_with_context(&context), Ok(false));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3855,"byte_end":3930,"line_start":100,"line_end":100,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3931,"byte_end":3938,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3939,"byte_end":3942,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ## Features","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3943,"byte_end":3958,"line_start":103,"line_end":103,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3959,"byte_end":3962,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ ### Operators","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3963,"byte_end":3980,"line_start":105,"line_end":105,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3981,"byte_end":3984,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ This crate offers a set of binary and unary operators for building expressions.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":3985,"byte_end":4068,"line_start":107,"line_end":107,"column_start":1,"column_end":84}},{"value":"/ Operators have a precedence to determine their order of evaluation, where operators of higher precedence are evaluated first.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4069,"byte_end":4198,"line_start":108,"line_end":108,"column_start":1,"column_end":130}},{"value":"/ The precedence should resemble that of most common programming languages, especially Rust.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4199,"byte_end":4293,"line_start":109,"line_end":109,"column_start":1,"column_end":95}},{"value":"/ Variables and values have a precedence of 200, and function literals have 190.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4294,"byte_end":4376,"line_start":110,"line_end":110,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4377,"byte_end":4380,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ Supported binary operators:","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4381,"byte_end":4412,"line_start":112,"line_end":112,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4413,"byte_end":4416,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ | Operator | Precedence | Description |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4417,"byte_end":4460,"line_start":114,"line_end":114,"column_start":1,"column_end":44}},{"value":"/ |----------|------------|-------------|","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4461,"byte_end":4504,"line_start":115,"line_end":115,"column_start":1,"column_end":44}},{"value":"/ | ^ | 120 | Exponentiation |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4505,"byte_end":4537,"line_start":116,"line_end":116,"column_start":1,"column_end":33}},{"value":"/ | * | 100 | Product |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4538,"byte_end":4563,"line_start":117,"line_end":117,"column_start":1,"column_end":26}},{"value":"/ | / | 100 | Division (integer if both arguments are integers, otherwise float) |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4564,"byte_end":4648,"line_start":118,"line_end":118,"column_start":1,"column_end":85}},{"value":"/ | % | 100 | Modulo (integer if both arguments are integers, otherwise float) |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4649,"byte_end":4731,"line_start":119,"line_end":119,"column_start":1,"column_end":83}},{"value":"/ | + | 95 | Sum or String Concatenation |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4732,"byte_end":4776,"line_start":120,"line_end":120,"column_start":1,"column_end":45}},{"value":"/ | - | 95 | Difference |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4777,"byte_end":4804,"line_start":121,"line_end":121,"column_start":1,"column_end":28}},{"value":"/ | < | 80 | Lower than |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4805,"byte_end":4832,"line_start":122,"line_end":122,"column_start":1,"column_end":28}},{"value":"/ | \\> | 80 | Greater than |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4833,"byte_end":4863,"line_start":123,"line_end":123,"column_start":1,"column_end":31}},{"value":"/ | <= | 80 | Lower than or equal |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4864,"byte_end":4901,"line_start":124,"line_end":124,"column_start":1,"column_end":38}},{"value":"/ | \\>= | 80 | Greater than or equal |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4902,"byte_end":4942,"line_start":125,"line_end":125,"column_start":1,"column_end":41}},{"value":"/ | == | 80 | Equal |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4943,"byte_end":4966,"line_start":126,"line_end":126,"column_start":1,"column_end":24}},{"value":"/ | != | 80 | Not equal |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4967,"byte_end":4994,"line_start":127,"line_end":127,"column_start":1,"column_end":28}},{"value":"/ | && | 75 | Logical and |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":4995,"byte_end":5024,"line_start":128,"line_end":128,"column_start":1,"column_end":30}},{"value":"/ | &#124;&#124; | 70 | Logical or |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5025,"byte_end":5063,"line_start":129,"line_end":129,"column_start":1,"column_end":39}},{"value":"/ | = | 50 | Assignment |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5064,"byte_end":5091,"line_start":130,"line_end":130,"column_start":1,"column_end":28}},{"value":"/ | += | 50 | Sum-Assignment or String-Concatenation-Assignment |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5092,"byte_end":5159,"line_start":131,"line_end":131,"column_start":1,"column_end":68}},{"value":"/ | -= | 50 | Difference-Assignment |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5160,"byte_end":5199,"line_start":132,"line_end":132,"column_start":1,"column_end":40}},{"value":"/ | *= | 50 | Product-Assignment |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5200,"byte_end":5236,"line_start":133,"line_end":133,"column_start":1,"column_end":37}},{"value":"/ | /= | 50 | Division-Assignment |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5237,"byte_end":5274,"line_start":134,"line_end":134,"column_start":1,"column_end":38}},{"value":"/ | %= | 50 | Modulo-Assignment |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5275,"byte_end":5310,"line_start":135,"line_end":135,"column_start":1,"column_end":36}},{"value":"/ | ^= | 50 | Exponentiation-Assignment |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5311,"byte_end":5354,"line_start":136,"line_end":136,"column_start":1,"column_end":44}},{"value":"/ | &&= | 50 | Logical-And-Assignment |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5355,"byte_end":5396,"line_start":137,"line_end":137,"column_start":1,"column_end":42}},{"value":"/ | &#124;&#124;= | 50 | Logical-Or-Assignment |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5397,"byte_end":5447,"line_start":138,"line_end":138,"column_start":1,"column_end":51}},{"value":"/ | , | 40 | Aggregation |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5448,"byte_end":5476,"line_start":139,"line_end":139,"column_start":1,"column_end":29}},{"value":"/ | ; | 0 | Expression Chaining |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5477,"byte_end":5512,"line_start":140,"line_end":140,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5513,"byte_end":5516,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ Supported unary operators:","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5517,"byte_end":5547,"line_start":142,"line_end":142,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5548,"byte_end":5551,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ | Operator | Precedence | Description |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5552,"byte_end":5595,"line_start":144,"line_end":144,"column_start":1,"column_end":44}},{"value":"/ |----------|------------|-------------|","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5596,"byte_end":5639,"line_start":145,"line_end":145,"column_start":1,"column_end":44}},{"value":"/ | - | 110 | Negation |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5640,"byte_end":5666,"line_start":146,"line_end":146,"column_start":1,"column_end":27}},{"value":"/ | ! | 110 | Logical not |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5667,"byte_end":5696,"line_start":147,"line_end":147,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5697,"byte_end":5700,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ Operators that take numbers as arguments can either take integers or floating point numbers.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5701,"byte_end":5797,"line_start":149,"line_end":149,"column_start":1,"column_end":97}},{"value":"/ If one of the arguments is a floating point number, all others are converted to floating point numbers as well, and the resulting value is a floating point number as well.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5798,"byte_end":5973,"line_start":150,"line_end":150,"column_start":1,"column_end":176}},{"value":"/ Otherwise, the result is an integer.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":5974,"byte_end":6014,"line_start":151,"line_end":151,"column_start":1,"column_end":41}},{"value":"/ An exception to this is the exponentiation operator that always returns a floating point number.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6015,"byte_end":6115,"line_start":152,"line_end":152,"column_start":1,"column_end":101}},{"value":"/ Example:","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6116,"byte_end":6128,"line_start":153,"line_end":153,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6129,"byte_end":6132,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6133,"byte_end":6144,"line_start":155,"line_end":155,"column_start":1,"column_end":12}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6145,"byte_end":6165,"line_start":156,"line_end":156,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6166,"byte_end":6169,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(eval(\"1 / 2\"), Ok(Value::from(0)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6170,"byte_end":6220,"line_start":158,"line_end":158,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(eval(\"1.0 / 2\"), Ok(Value::from(0.5)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6221,"byte_end":6275,"line_start":159,"line_end":159,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(eval(\"2^2\"), Ok(Value::from(4.0)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6276,"byte_end":6326,"line_start":160,"line_end":160,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6327,"byte_end":6334,"line_start":161,"line_end":161,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6335,"byte_end":6338,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ #### The Aggregation Operator","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6339,"byte_end":6372,"line_start":163,"line_end":163,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6373,"byte_end":6376,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ The aggregation operator aggregates a set of values into a tuple.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6377,"byte_end":6446,"line_start":165,"line_end":165,"column_start":1,"column_end":70}},{"value":"/ A tuple can contain arbitrary values, it is not restricted to a single type.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6447,"byte_end":6527,"line_start":166,"line_end":166,"column_start":1,"column_end":81}},{"value":"/ The operator is n-ary, so it supports creating tuples longer than length two.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6528,"byte_end":6609,"line_start":167,"line_end":167,"column_start":1,"column_end":82}},{"value":"/ Example:","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6610,"byte_end":6622,"line_start":168,"line_end":168,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6623,"byte_end":6626,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6627,"byte_end":6638,"line_start":170,"line_end":170,"column_start":1,"column_end":12}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6639,"byte_end":6659,"line_start":171,"line_end":171,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6660,"byte_end":6663,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(eval(\"1, \\\"b\\\", 3\"),","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6664,"byte_end":6699,"line_start":173,"line_end":173,"column_start":1,"column_end":36}},{"value":"/            Ok(Value::from(vec![Value::from(1), Value::from(\"b\"), Value::from(3)])));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6700,"byte_end":6788,"line_start":174,"line_end":174,"column_start":1,"column_end":89}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6789,"byte_end":6796,"line_start":175,"line_end":175,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6797,"byte_end":6800,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ To create nested tuples, use parentheses:","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6801,"byte_end":6846,"line_start":177,"line_end":177,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6847,"byte_end":6850,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6851,"byte_end":6862,"line_start":179,"line_end":179,"column_start":1,"column_end":12}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6863,"byte_end":6883,"line_start":180,"line_end":180,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6884,"byte_end":6887,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(eval(\"1, 2, (true, \\\"b\\\")\"), Ok(Value::from(vec![","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6888,"byte_end":6952,"line_start":182,"line_end":182,"column_start":1,"column_end":65}},{"value":"/     Value::from(1),","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6953,"byte_end":6976,"line_start":183,"line_end":183,"column_start":1,"column_end":24}},{"value":"/     Value::from(2),","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":6977,"byte_end":7000,"line_start":184,"line_end":184,"column_start":1,"column_end":24}},{"value":"/     Value::from(vec![","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7001,"byte_end":7026,"line_start":185,"line_end":185,"column_start":1,"column_end":26}},{"value":"/         Value::from(true),","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7027,"byte_end":7057,"line_start":186,"line_end":186,"column_start":1,"column_end":31}},{"value":"/         Value::from(\"b\")","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7058,"byte_end":7086,"line_start":187,"line_end":187,"column_start":1,"column_end":29}},{"value":"/     ])","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7087,"byte_end":7097,"line_start":188,"line_end":188,"column_start":1,"column_end":11}},{"value":"/ ])));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7098,"byte_end":7107,"line_start":189,"line_end":189,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7108,"byte_end":7115,"line_start":190,"line_end":190,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7116,"byte_end":7119,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ #### The Assignment Operator","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7120,"byte_end":7152,"line_start":192,"line_end":192,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7153,"byte_end":7156,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ This crate features the assignment operator, that allows expressions to store their result in a variable in the expression context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7157,"byte_end":7292,"line_start":194,"line_end":194,"column_start":1,"column_end":136}},{"value":"/ If an expression uses the assignment operator, it must be evaluated with a mutable context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7293,"byte_end":7388,"line_start":195,"line_end":195,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7389,"byte_end":7392,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ Note that assignments are type safe when using the `HashMapContext`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7393,"byte_end":7465,"line_start":197,"line_end":197,"column_start":1,"column_end":73}},{"value":"/ That means that if an identifier is assigned a value of a type once, it cannot be assigned a value of another type.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7466,"byte_end":7585,"line_start":198,"line_end":198,"column_start":1,"column_end":120}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7586,"byte_end":7589,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7590,"byte_end":7601,"line_start":200,"line_end":200,"column_start":1,"column_end":12}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7602,"byte_end":7622,"line_start":201,"line_end":201,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7623,"byte_end":7626,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ let mut context = HashMapContext::new();","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7627,"byte_end":7671,"line_start":203,"line_end":203,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(eval_with_context(\"a = 5\", &context), Err(EvalexprError::ContextNotMutable));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7672,"byte_end":7764,"line_start":204,"line_end":204,"column_start":1,"column_end":93}},{"value":"/ assert_eq!(eval_empty_with_context_mut(\"a = 5\", &mut context), Ok(EMPTY_VALUE));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7765,"byte_end":7849,"line_start":205,"line_end":205,"column_start":1,"column_end":85}},{"value":"/ assert_eq!(eval_empty_with_context_mut(\"a = 5.0\", &mut context),","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7850,"byte_end":7918,"line_start":206,"line_end":206,"column_start":1,"column_end":69}},{"value":"/            Err(EvalexprError::expected_int(5.0.into())));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7919,"byte_end":7980,"line_start":207,"line_end":207,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(eval_int_with_context(\"a\", &context), Ok(5));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":7981,"byte_end":8041,"line_start":208,"line_end":208,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(context.get_value(\"a\"), Some(5.into()).as_ref());","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":8042,"byte_end":8106,"line_start":209,"line_end":209,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":8107,"byte_end":8114,"line_start":210,"line_end":210,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":8115,"byte_end":8118,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ For each binary operator, there exists an equivalent operator-assignment operator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":8119,"byte_end":8205,"line_start":212,"line_end":212,"column_start":1,"column_end":87}},{"value":"/ Here are some examples:","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":8206,"byte_end":8233,"line_start":213,"line_end":213,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":8234,"byte_end":8237,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":8238,"byte_end":8249,"line_start":215,"line_end":215,"column_start":1,"column_end":12}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":8250,"byte_end":8270,"line_start":216,"line_end":216,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":8271,"byte_end":8274,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(eval_int(\"a = 2; a *= 2; a += 2; a\"), Ok(6));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":8275,"byte_end":8335,"line_start":218,"line_end":218,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(eval_float(\"a = 2.2; a /= 2.0 / 4 + 1; a\"), Ok(2.2 / (2.0 / 4.0 + 1.0)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":8336,"byte_end":8424,"line_start":219,"line_end":219,"column_start":1,"column_end":89}},{"value":"/ assert_eq!(eval_string(\"a = \\\"abc\\\"; a += \\\"def\\\"; a\"), Ok(\"abcdef\".to_string()));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":8425,"byte_end":8511,"line_start":220,"line_end":220,"column_start":1,"column_end":87}},{"value":"/ assert_eq!(eval_boolean(\"a = true; a &&= false; a\"), Ok(false));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":8512,"byte_end":8580,"line_start":221,"line_end":221,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":8581,"byte_end":8588,"line_start":222,"line_end":222,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":8589,"byte_end":8592,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ #### The Expression Chaining Operator","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":8593,"byte_end":8634,"line_start":224,"line_end":224,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":8635,"byte_end":8638,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ The expression chaining operator works as one would expect from programming languages that use the semicolon to end statements, like `Rust`, `C` or `Java`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":8639,"byte_end":8798,"line_start":226,"line_end":226,"column_start":1,"column_end":160}},{"value":"/ It has the special feature that it returns the value of the last expression in the expression chain.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":8799,"byte_end":8903,"line_start":227,"line_end":227,"column_start":1,"column_end":105}},{"value":"/ If the last expression is terminated by a semicolon as well, then `Value::Empty` is returned.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":8904,"byte_end":9001,"line_start":228,"line_end":228,"column_start":1,"column_end":98}},{"value":"/ Expression chaining is useful together with assignment to create small scripts.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9002,"byte_end":9085,"line_start":229,"line_end":229,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9086,"byte_end":9089,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9090,"byte_end":9101,"line_start":231,"line_end":231,"column_start":1,"column_end":12}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9102,"byte_end":9122,"line_start":232,"line_end":232,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9123,"byte_end":9126,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ let mut context = HashMapContext::new();","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9127,"byte_end":9171,"line_start":234,"line_end":234,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(eval(\"1;2;3;4;\"), Ok(Value::Empty));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9172,"byte_end":9223,"line_start":235,"line_end":235,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(eval(\"1;2;3;4\"), Ok(4.into()));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9224,"byte_end":9270,"line_start":236,"line_end":236,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9271,"byte_end":9274,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ // Initialization of variables via script","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9275,"byte_end":9320,"line_start":238,"line_end":238,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(eval_empty_with_context_mut(\"hp = 1; max_hp = 5; heal_amount = 3;\", &mut context),","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9321,"byte_end":9418,"line_start":239,"line_end":239,"column_start":1,"column_end":98}},{"value":"/            Ok(EMPTY_VALUE));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9419,"byte_end":9451,"line_start":240,"line_end":240,"column_start":1,"column_end":33}},{"value":"/ // Precompile healing script","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9452,"byte_end":9484,"line_start":241,"line_end":241,"column_start":1,"column_end":33}},{"value":"/ let healing_script = build_operator_tree(\"hp = min(hp + heal_amount, max_hp); hp\").unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9485,"byte_end":9614,"line_start":242,"line_end":242,"column_start":1,"column_end":130}},{"value":"/ // Execute precompiled healing script","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9615,"byte_end":9656,"line_start":243,"line_end":243,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(healing_script.eval_int_with_context_mut(&mut context), Ok(4));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9657,"byte_end":9735,"line_start":244,"line_end":244,"column_start":1,"column_end":79}},{"value":"/ assert_eq!(healing_script.eval_int_with_context_mut(&mut context), Ok(5));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9736,"byte_end":9814,"line_start":245,"line_end":245,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9815,"byte_end":9822,"line_start":246,"line_end":246,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9823,"byte_end":9826,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ ### Contexts","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9827,"byte_end":9843,"line_start":248,"line_end":248,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9844,"byte_end":9847,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ An expression evaluator that just evaluates expressions would be useful already, but this crate can do more.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9848,"byte_end":9960,"line_start":250,"line_end":250,"column_start":1,"column_end":113}},{"value":"/ It allows using [*variables*](#variables), [*assignments*](#the-assignment-operator), [*statement chaining*](#the-expression-chaining-operator) and [*user-defined functions*](#user-defined-functions) within an expression.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":9961,"byte_end":10186,"line_start":251,"line_end":251,"column_start":1,"column_end":226}},{"value":"/ When assigning to variables, the assignment is stored in a context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":10187,"byte_end":10258,"line_start":252,"line_end":252,"column_start":1,"column_end":72}},{"value":"/ When the variable is read later on, it is read from the context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":10259,"byte_end":10327,"line_start":253,"line_end":253,"column_start":1,"column_end":69}},{"value":"/ Contexts can be preserved between multiple calls to eval by creating them yourself.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":10328,"byte_end":10415,"line_start":254,"line_end":254,"column_start":1,"column_end":88}},{"value":"/ Here is a simple example to show the difference between preserving and not preserving context between evaluations:","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":10416,"byte_end":10534,"line_start":255,"line_end":255,"column_start":1,"column_end":119}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":10535,"byte_end":10538,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":10539,"byte_end":10550,"line_start":257,"line_end":257,"column_start":1,"column_end":12}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":10551,"byte_end":10571,"line_start":258,"line_end":258,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":10572,"byte_end":10575,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(eval(\"a = 5;\"), Ok(Value::from(())));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":10576,"byte_end":10628,"line_start":260,"line_end":260,"column_start":1,"column_end":53}},{"value":"/ // The context is not preserved between eval calls","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":10629,"byte_end":10683,"line_start":261,"line_end":261,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(eval(\"a\"), Err(EvalexprError::VariableIdentifierNotFound(\"a\".to_string())));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":10684,"byte_end":10775,"line_start":262,"line_end":262,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":10776,"byte_end":10779,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ let mut context = HashMapContext::new();","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":10780,"byte_end":10824,"line_start":264,"line_end":264,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(eval_with_context_mut(\"a = 5;\", &mut context), Ok(Value::from(())));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":10825,"byte_end":10908,"line_start":265,"line_end":265,"column_start":1,"column_end":84}},{"value":"/ // Assignments require mutable contexts","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":10909,"byte_end":10952,"line_start":266,"line_end":266,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(eval_with_context(\"a = 6\", &context), Err(EvalexprError::ContextNotMutable));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":10953,"byte_end":11045,"line_start":267,"line_end":267,"column_start":1,"column_end":93}},{"value":"/ // The HashMapContext is type safe","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":11046,"byte_end":11084,"line_start":268,"line_end":268,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(eval_with_context_mut(\"a = 5.5\", &mut context),","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":11085,"byte_end":11147,"line_start":269,"line_end":269,"column_start":1,"column_end":63}},{"value":"/            Err(EvalexprError::ExpectedInt { actual: Value::from(5.5) }));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":11148,"byte_end":11225,"line_start":270,"line_end":270,"column_start":1,"column_end":78}},{"value":"/ // Reading a variable does not require a mutable context","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":11226,"byte_end":11286,"line_start":271,"line_end":271,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(eval_with_context(\"a\", &context), Ok(Value::from(5)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":11287,"byte_end":11356,"line_start":272,"line_end":272,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":11357,"byte_end":11360,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":11361,"byte_end":11368,"line_start":274,"line_end":274,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":11369,"byte_end":11372,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ Note that the assignment is forgotten between the two calls to eval in the first example.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":11373,"byte_end":11466,"line_start":276,"line_end":276,"column_start":1,"column_end":94}},{"value":"/ In the second part, the assignment is correctly preserved.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":11467,"byte_end":11529,"line_start":277,"line_end":277,"column_start":1,"column_end":63}},{"value":"/ Note as well that to assign to a variable, the context needs to be passed as a mutable reference.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":11530,"byte_end":11631,"line_start":278,"line_end":278,"column_start":1,"column_end":102}},{"value":"/ When passed as an immutable reference, an error is returned.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":11632,"byte_end":11696,"line_start":279,"line_end":279,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":11697,"byte_end":11700,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ Also, the `HashMapContext` is type safe.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":11701,"byte_end":11745,"line_start":281,"line_end":281,"column_start":1,"column_end":45}},{"value":"/ This means that assigning to `a` again with a different type yields an error.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":11746,"byte_end":11827,"line_start":282,"line_end":282,"column_start":1,"column_end":82}},{"value":"/ Type unsafe contexts may be implemented if requested.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":11828,"byte_end":11885,"line_start":283,"line_end":283,"column_start":1,"column_end":58}},{"value":"/ For reading `a`, it is enough to pass an immutable reference.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":11886,"byte_end":11951,"line_start":284,"line_end":284,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":11952,"byte_end":11955,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ Contexts can also be manipulated in code.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":11956,"byte_end":12001,"line_start":286,"line_end":286,"column_start":1,"column_end":46}},{"value":"/ Take a look at the following example:","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12002,"byte_end":12043,"line_start":287,"line_end":287,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12044,"byte_end":12047,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12048,"byte_end":12059,"line_start":289,"line_end":289,"column_start":1,"column_end":12}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12060,"byte_end":12080,"line_start":290,"line_end":290,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12081,"byte_end":12084,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ let mut context = HashMapContext::new();","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12085,"byte_end":12129,"line_start":292,"line_end":292,"column_start":1,"column_end":45}},{"value":"/ // We can set variables in code like this...","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12130,"byte_end":12178,"line_start":293,"line_end":293,"column_start":1,"column_end":49}},{"value":"/ context.set_value(\"a\".into(), 5.into());","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12179,"byte_end":12223,"line_start":294,"line_end":294,"column_start":1,"column_end":45}},{"value":"/ // ...and read from them in expressions","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12224,"byte_end":12267,"line_start":295,"line_end":295,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(eval_int_with_context(\"a\", &context), Ok(5));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12268,"byte_end":12328,"line_start":296,"line_end":296,"column_start":1,"column_end":61}},{"value":"/ // We can write or overwrite variables in expressions...","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12329,"byte_end":12389,"line_start":297,"line_end":297,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(eval_with_context_mut(\"a = 10; b = 1.0;\", &mut context), Ok(().into()));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12390,"byte_end":12477,"line_start":298,"line_end":298,"column_start":1,"column_end":88}},{"value":"/ // ...and read the value in code like this","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12478,"byte_end":12524,"line_start":299,"line_end":299,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(context.get_value(\"a\"), Some(&Value::from(10)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12525,"byte_end":12588,"line_start":300,"line_end":300,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(context.get_value(\"b\"), Some(&Value::from(1.0)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12589,"byte_end":12653,"line_start":301,"line_end":301,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12654,"byte_end":12661,"line_start":302,"line_end":302,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12662,"byte_end":12665,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ Contexts are also required for user-defined functions.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12666,"byte_end":12724,"line_start":304,"line_end":304,"column_start":1,"column_end":59}},{"value":"/ Those can be passed one by one with the `set_function` method, but it might be more convenient to use the `context_map!` macro instead:","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12725,"byte_end":12864,"line_start":305,"line_end":305,"column_start":1,"column_end":140}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12865,"byte_end":12868,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12869,"byte_end":12880,"line_start":307,"line_end":307,"column_start":1,"column_end":12}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12881,"byte_end":12901,"line_start":308,"line_end":308,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12902,"byte_end":12905,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ let context = context_map!{","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12906,"byte_end":12937,"line_start":310,"line_end":310,"column_start":1,"column_end":32}},{"value":"/     \"f\" => Function::new(|args| Ok(Value::from(args.as_int()? + 5))),","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":12938,"byte_end":13011,"line_start":311,"line_end":311,"column_start":1,"column_end":74}},{"value":"/ }.unwrap_or_else(|error| panic!(\"Error creating context: {}\", error));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":13012,"byte_end":13086,"line_start":312,"line_end":312,"column_start":1,"column_end":75}},{"value":"/ assert_eq!(eval_int_with_context(\"f 5\", &context), Ok(10));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":13087,"byte_end":13150,"line_start":313,"line_end":313,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":13151,"byte_end":13158,"line_start":314,"line_end":314,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":13159,"byte_end":13162,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ For more information about user-defined functions, refer to the respective [section](#user-defined-functions).","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":13163,"byte_end":13277,"line_start":316,"line_end":316,"column_start":1,"column_end":115}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":13278,"byte_end":13281,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ ### Builtin Functions","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":13282,"byte_end":13307,"line_start":318,"line_end":318,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":13308,"byte_end":13311,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ This crate offers a set of builtin functions.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":13312,"byte_end":13361,"line_start":320,"line_end":320,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":13362,"byte_end":13365,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ | Identifier           | Argument Amount | Argument Types         | Description |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":13366,"byte_end":13451,"line_start":322,"line_end":322,"column_start":1,"column_end":86}},{"value":"/ |----------------------|-----------------|------------------------|-------------|","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":13452,"byte_end":13537,"line_start":323,"line_end":323,"column_start":1,"column_end":86}},{"value":"/ | `min`                | >= 1            | Numeric                | Returns the minimum of the arguments |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":13538,"byte_end":13648,"line_start":324,"line_end":324,"column_start":1,"column_end":111}},{"value":"/ | `max`                | >= 1            | Numeric                | Returns the maximum of the arguments |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":13649,"byte_end":13759,"line_start":325,"line_end":325,"column_start":1,"column_end":111}},{"value":"/ | `len`                | 1               | String/Tuple           | Returns the character length of a string, or the amount of elements in a tuple (not recursively) |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":13760,"byte_end":13930,"line_start":326,"line_end":326,"column_start":1,"column_end":171}},{"value":"/ | `floor`              | 1               | Numeric                | Returns the largest integer less than or equal to a number |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":13931,"byte_end":14063,"line_start":327,"line_end":327,"column_start":1,"column_end":133}},{"value":"/ | `round`              | 1               | Numeric                | Returns the nearest integer to a number. Rounds half-way cases away from 0.0 |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":14064,"byte_end":14214,"line_start":328,"line_end":328,"column_start":1,"column_end":151}},{"value":"/ | `ceil`               | 1               | Numeric                | Returns the smallest integer greater than or equal to a number |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":14215,"byte_end":14351,"line_start":329,"line_end":329,"column_start":1,"column_end":137}},{"value":"/ | `if`                 | 3               | Boolean, Any, Any      | If the first argument is true, returns the second argument, otherwise, returns the third  |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":14352,"byte_end":14515,"line_start":330,"line_end":330,"column_start":1,"column_end":164}},{"value":"/ | `math::ln`           | 1               | Numeric                | Returns the natural logarithm of the number |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":14516,"byte_end":14633,"line_start":331,"line_end":331,"column_start":1,"column_end":118}},{"value":"/ | `math::log`          | 2               | Numeric, Numeric       | Returns the logarithm of the number with respect to an arbitrary base |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":14634,"byte_end":14777,"line_start":332,"line_end":332,"column_start":1,"column_end":144}},{"value":"/ | `math::log2`         | 1               | Numeric                | Returns the base 2 logarithm of the number |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":14778,"byte_end":14894,"line_start":333,"line_end":333,"column_start":1,"column_end":117}},{"value":"/ | `math::log10`        | 1               | Numeric                | Returns the base 10 logarithm of the number |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":14895,"byte_end":15012,"line_start":334,"line_end":334,"column_start":1,"column_end":118}},{"value":"/ | `math::exp`          | 1               | Numeric                | Returns `e^(number)`, (the exponential function) |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":15013,"byte_end":15135,"line_start":335,"line_end":335,"column_start":1,"column_end":123}},{"value":"/ | `math::exp2`         | 1               | Numeric                | Returns `2^(number)` |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":15136,"byte_end":15230,"line_start":336,"line_end":336,"column_start":1,"column_end":95}},{"value":"/ | `math::pow`          | 2               | Numeric, Numeric       | Raises a number to the power of the other number |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":15231,"byte_end":15353,"line_start":337,"line_end":337,"column_start":1,"column_end":123}},{"value":"/ | `math::cos`          | 1               | Numeric                | Computes the cosine of a number (in radians) |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":15354,"byte_end":15472,"line_start":338,"line_end":338,"column_start":1,"column_end":119}},{"value":"/ | `math::acos`         | 1               | Numeric                | Computes the arccosine of a number. The return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1] |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":15473,"byte_end":15684,"line_start":339,"line_end":339,"column_start":1,"column_end":212}},{"value":"/ | `math::cosh`         | 1               | Numeric                | Hyperbolic cosine function |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":15685,"byte_end":15785,"line_start":340,"line_end":340,"column_start":1,"column_end":101}},{"value":"/ | `math::acosh`        | 1               | Numeric                | Inverse hyperbolic cosine function |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":15786,"byte_end":15894,"line_start":341,"line_end":341,"column_start":1,"column_end":109}},{"value":"/ | `math::sin`          | 1               | Numeric                | Computes the sine of a number (in radians) |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":15895,"byte_end":16011,"line_start":342,"line_end":342,"column_start":1,"column_end":117}},{"value":"/ | `math::asin`         | 1               | Numeric                | Computes the arcsine of a number. The return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1] |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":16012,"byte_end":16227,"line_start":343,"line_end":343,"column_start":1,"column_end":216}},{"value":"/ | `math::sinh`         | 1               | Numeric                | Hyperbolic sine function |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":16228,"byte_end":16326,"line_start":344,"line_end":344,"column_start":1,"column_end":99}},{"value":"/ | `math::asinh`        | 1               | Numeric                | Inverse hyperbolic sine function |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":16327,"byte_end":16433,"line_start":345,"line_end":345,"column_start":1,"column_end":107}},{"value":"/ | `math::tan`          | 1               | Numeric                | Computes the tangent of a number (in radians) |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":16434,"byte_end":16553,"line_start":346,"line_end":346,"column_start":1,"column_end":120}},{"value":"/ | `math::atan`         | 1               | Numeric                | Computes the arctangent of a number. The return value is in radians in the range [-pi/2, pi/2] |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":16554,"byte_end":16722,"line_start":347,"line_end":347,"column_start":1,"column_end":169}},{"value":"/ | `math::atan2`        | 2               | Numeric, Numeric       | Computes the four quadrant arctangent in radians |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":16723,"byte_end":16845,"line_start":348,"line_end":348,"column_start":1,"column_end":123}},{"value":"/ | `math::tanh`         | 1               | Numeric                | Hyperbolic tangent function |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":16846,"byte_end":16947,"line_start":349,"line_end":349,"column_start":1,"column_end":102}},{"value":"/ | `math::atanh`        | 1               | Numeric                | Inverse hyperbolic tangent function. |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":16948,"byte_end":17058,"line_start":350,"line_end":350,"column_start":1,"column_end":111}},{"value":"/ | `math::sqrt`         | 1               | Numeric                | Returns the square root of a number. Returns NaN for a negative number |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":17059,"byte_end":17203,"line_start":351,"line_end":351,"column_start":1,"column_end":145}},{"value":"/ | `math::cbrt`         | 1               | Numeric                | Returns the cube root of a number |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":17204,"byte_end":17311,"line_start":352,"line_end":352,"column_start":1,"column_end":108}},{"value":"/ | `math::hypot`        | 2               | Numeric                | Calculates the length of the hypotenuse of a right-angle triangle given legs of length given by the two arguments |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":17312,"byte_end":17499,"line_start":353,"line_end":353,"column_start":1,"column_end":188}},{"value":"/ | `str::regex_matches` | 2               | String, String         | Returns true if the first argument matches the regex in the second argument (Requires `regex_support` feature flag) |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":17500,"byte_end":17689,"line_start":354,"line_end":354,"column_start":1,"column_end":190}},{"value":"/ | `str::regex_replace` | 3               | String, String, String | Returns the first argument with all matches of the regex in the second argument replaced by the third argument (Requires `regex_support` feature flag) |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":17690,"byte_end":17914,"line_start":355,"line_end":355,"column_start":1,"column_end":225}},{"value":"/ | `str::to_lowercase`  | 1               | String                 | Returns the lower-case version of the string |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":17915,"byte_end":18033,"line_start":356,"line_end":356,"column_start":1,"column_end":119}},{"value":"/ | `str::to_uppercase`  | 1               | String                 | Returns the upper-case version of the string |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":18034,"byte_end":18152,"line_start":357,"line_end":357,"column_start":1,"column_end":119}},{"value":"/ | `str::trim`          | 1               | String                 | Strips whitespace from the start and the end of the string |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":18153,"byte_end":18285,"line_start":358,"line_end":358,"column_start":1,"column_end":133}},{"value":"/ | `str::from`          | >= 0            | Any                    | Returns passed value as string |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":18286,"byte_end":18390,"line_start":359,"line_end":359,"column_start":1,"column_end":105}},{"value":"/ | `bitand`             | 2               | Int                    | Computes the bitwise and of the given integers |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":18391,"byte_end":18511,"line_start":360,"line_end":360,"column_start":1,"column_end":121}},{"value":"/ | `bitor`              | 2               | Int                    | Computes the bitwise or of the given integers |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":18512,"byte_end":18631,"line_start":361,"line_end":361,"column_start":1,"column_end":120}},{"value":"/ | `bitxor`             | 2               | Int                    | Computes the bitwise xor of the given integers |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":18632,"byte_end":18752,"line_start":362,"line_end":362,"column_start":1,"column_end":121}},{"value":"/ | `bitnot`             | 1               | Int                    | Computes the bitwise not of the given integer |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":18753,"byte_end":18872,"line_start":363,"line_end":363,"column_start":1,"column_end":120}},{"value":"/ | `shl`                | 2               | Int                    | Computes the given integer bitwise shifted left by the other given integer |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":18873,"byte_end":19021,"line_start":364,"line_end":364,"column_start":1,"column_end":149}},{"value":"/ | `shr`                | 2               | Int                    | Computes the given integer bitwise shifted right by the other given integer |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":19022,"byte_end":19171,"line_start":365,"line_end":365,"column_start":1,"column_end":150}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":19172,"byte_end":19175,"line_start":366,"line_end":366,"column_start":1,"column_end":4}},{"value":"/ The `min` and `max` functions can deal with a mixture of integer and floating point arguments.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":19176,"byte_end":19274,"line_start":367,"line_end":367,"column_start":1,"column_end":99}},{"value":"/ If the maximum or minimum is an integer, then an integer is returned.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":19275,"byte_end":19348,"line_start":368,"line_end":368,"column_start":1,"column_end":74}},{"value":"/ Otherwise, a float is returned.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":19349,"byte_end":19384,"line_start":369,"line_end":369,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":19385,"byte_end":19388,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ The regex functions require the feature flag `regex_support`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":19389,"byte_end":19454,"line_start":371,"line_end":371,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":19455,"byte_end":19458,"line_start":372,"line_end":372,"column_start":1,"column_end":4}},{"value":"/ ### Values","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":19459,"byte_end":19473,"line_start":373,"line_end":373,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":19474,"byte_end":19477,"line_start":374,"line_end":374,"column_start":1,"column_end":4}},{"value":"/ Operators take values as arguments and produce values as results.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":19478,"byte_end":19547,"line_start":375,"line_end":375,"column_start":1,"column_end":70}},{"value":"/ Values can be booleans, integer or floating point numbers, strings, tuples or the empty type.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":19548,"byte_end":19645,"line_start":376,"line_end":376,"column_start":1,"column_end":98}},{"value":"/ Values are denoted as displayed in the following table.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":19646,"byte_end":19705,"line_start":377,"line_end":377,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":19706,"byte_end":19709,"line_start":378,"line_end":378,"column_start":1,"column_end":4}},{"value":"/ | Value type | Example |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":19710,"byte_end":19738,"line_start":379,"line_end":379,"column_start":1,"column_end":29}},{"value":"/ |------------|---------|","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":19739,"byte_end":19767,"line_start":380,"line_end":380,"column_start":1,"column_end":29}},{"value":"/ | `Value::String` | `\"abc\"`, `\"\"`, `\"a\\\"b\\\\c\"` |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":19768,"byte_end":19820,"line_start":381,"line_end":381,"column_start":1,"column_end":53}},{"value":"/ | `Value::Boolean` | `true`, `false` |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":19821,"byte_end":19863,"line_start":382,"line_end":382,"column_start":1,"column_end":43}},{"value":"/ | `Value::Int` | `3`, `-9`, `0`, `135412` |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":19864,"byte_end":19911,"line_start":383,"line_end":383,"column_start":1,"column_end":48}},{"value":"/ | `Value::Float` | `3.`, `.35`, `1.00`, `0.5`, `123.554`, `23e4`, `-2e-3`, `3.54e+2` |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":19912,"byte_end":20002,"line_start":384,"line_end":384,"column_start":1,"column_end":91}},{"value":"/ | `Value::Tuple` | `(3, 55.0, false, ())`, `(1, 2)` |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20003,"byte_end":20060,"line_start":385,"line_end":385,"column_start":1,"column_end":58}},{"value":"/ | `Value::Empty` | `()` |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20061,"byte_end":20090,"line_start":386,"line_end":386,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20091,"byte_end":20094,"line_start":387,"line_end":387,"column_start":1,"column_end":4}},{"value":"/ Integers are internally represented as `i64`, and floating point numbers are represented as `f64`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20095,"byte_end":20197,"line_start":388,"line_end":388,"column_start":1,"column_end":103}},{"value":"/ Tuples are represented as `Vec<Value>` and empty values are not stored, but represented by Rust's unit type `()` where necessary.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20198,"byte_end":20331,"line_start":389,"line_end":389,"column_start":1,"column_end":134}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20332,"byte_end":20335,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ There exist type aliases for some of the types.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20336,"byte_end":20387,"line_start":391,"line_end":391,"column_start":1,"column_end":52}},{"value":"/ They include `IntType`, `FloatType`, `TupleType` and `EmptyType`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20388,"byte_end":20457,"line_start":392,"line_end":392,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20458,"byte_end":20461,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/ Values can be constructed either directly or using the `From` trait.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20462,"byte_end":20534,"line_start":394,"line_end":394,"column_start":1,"column_end":73}},{"value":"/ They can be decomposed using the `Value::as_[type]` methods.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20535,"byte_end":20599,"line_start":395,"line_end":395,"column_start":1,"column_end":65}},{"value":"/ The type of a value can be checked using the `Value::is_[type]` methods.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20600,"byte_end":20676,"line_start":396,"line_end":396,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20677,"byte_end":20680,"line_start":397,"line_end":397,"column_start":1,"column_end":4}},{"value":"/ **Examples for constructing a value:**","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20681,"byte_end":20723,"line_start":398,"line_end":398,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20724,"byte_end":20727,"line_start":399,"line_end":399,"column_start":1,"column_end":4}},{"value":"/ | Code | Result |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20728,"byte_end":20749,"line_start":400,"line_end":400,"column_start":1,"column_end":22}},{"value":"/ |------|--------|","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20750,"byte_end":20771,"line_start":401,"line_end":401,"column_start":1,"column_end":22}},{"value":"/ | `Value::from(4)` | `Value::Int(4)` |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20772,"byte_end":20814,"line_start":402,"line_end":402,"column_start":1,"column_end":43}},{"value":"/ | `Value::from(4.4)` | `Value::Float(4.4)` |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20815,"byte_end":20863,"line_start":403,"line_end":403,"column_start":1,"column_end":49}},{"value":"/ | `Value::from(true)` | `Value::Boolean(true)` |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20864,"byte_end":20916,"line_start":404,"line_end":404,"column_start":1,"column_end":53}},{"value":"/ | `Value::from(vec![Value::from(3)])` | `Value::Tuple(vec![Value::Int(3)])` |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20917,"byte_end":20998,"line_start":405,"line_end":405,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":20999,"byte_end":21002,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ **Examples for deconstructing a value:**","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21003,"byte_end":21047,"line_start":407,"line_end":407,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21048,"byte_end":21051,"line_start":408,"line_end":408,"column_start":1,"column_end":4}},{"value":"/ | Code | Result |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21052,"byte_end":21073,"line_start":409,"line_end":409,"column_start":1,"column_end":22}},{"value":"/ |------|--------|","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21074,"byte_end":21095,"line_start":410,"line_end":410,"column_start":1,"column_end":22}},{"value":"/ | `Value::from(4).as_int()` | `Ok(4)` |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21096,"byte_end":21139,"line_start":411,"line_end":411,"column_start":1,"column_end":44}},{"value":"/ | `Value::from(4.4).as_float()` | `Ok(4.4)` |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21140,"byte_end":21189,"line_start":412,"line_end":412,"column_start":1,"column_end":50}},{"value":"/ | `Value::from(true).as_int()` | `Err(Error::ExpectedInt {actual: Value::Boolean(true)})` |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21190,"byte_end":21285,"line_start":413,"line_end":413,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21286,"byte_end":21289,"line_start":414,"line_end":414,"column_start":1,"column_end":4}},{"value":"/ Values have a precedence of 200.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21290,"byte_end":21326,"line_start":415,"line_end":415,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21327,"byte_end":21330,"line_start":416,"line_end":416,"column_start":1,"column_end":4}},{"value":"/ ### Variables","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21331,"byte_end":21348,"line_start":417,"line_end":417,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21349,"byte_end":21352,"line_start":418,"line_end":418,"column_start":1,"column_end":4}},{"value":"/ This crate allows to compile parameterizable formulas by using variables.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21353,"byte_end":21430,"line_start":419,"line_end":419,"column_start":1,"column_end":78}},{"value":"/ A variable is a literal in the formula, that does not contain whitespace or can be parsed as value.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21431,"byte_end":21534,"line_start":420,"line_end":420,"column_start":1,"column_end":104}},{"value":"/ For working with variables, a [context](#contexts) is required.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21535,"byte_end":21602,"line_start":421,"line_end":421,"column_start":1,"column_end":68}},{"value":"/ It stores the mappings from variables to their values.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21603,"byte_end":21661,"line_start":422,"line_end":422,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21662,"byte_end":21665,"line_start":423,"line_end":423,"column_start":1,"column_end":4}},{"value":"/ Variables do not have fixed types in the expression itself, but are typed by the context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21666,"byte_end":21759,"line_start":424,"line_end":424,"column_start":1,"column_end":94}},{"value":"/ Once a variable is assigned a value of a specific type, it cannot be assigned a value of another type.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21760,"byte_end":21866,"line_start":425,"line_end":425,"column_start":1,"column_end":107}},{"value":"/ This might change in the future and can be changed by using a type-unsafe context (not provided by this crate as of now).","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21867,"byte_end":21992,"line_start":426,"line_end":426,"column_start":1,"column_end":126}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21993,"byte_end":21996,"line_start":427,"line_end":427,"column_start":1,"column_end":4}},{"value":"/ Here are some examples and counter-examples on expressions that are interpreted as variables:","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":21997,"byte_end":22094,"line_start":428,"line_end":428,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":22095,"byte_end":22098,"line_start":429,"line_end":429,"column_start":1,"column_end":4}},{"value":"/ | Expression | Variable? | Explanation |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":22099,"byte_end":22143,"line_start":430,"line_end":430,"column_start":1,"column_end":45}},{"value":"/ |------------|--------|-------------|","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":22144,"byte_end":22185,"line_start":431,"line_end":431,"column_start":1,"column_end":42}},{"value":"/ | `a` | yes | |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":22186,"byte_end":22205,"line_start":432,"line_end":432,"column_start":1,"column_end":20}},{"value":"/ | `abc` | yes | |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":22206,"byte_end":22227,"line_start":433,"line_end":433,"column_start":1,"column_end":22}},{"value":"/ | `a<b` | no | Expression is interpreted as variable `a`, operator `<` and variable `b` |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":22228,"byte_end":22321,"line_start":434,"line_end":434,"column_start":1,"column_end":94}},{"value":"/ | `a b` | no | Expression is interpreted as function `a` applied to argument `b` |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":22322,"byte_end":22408,"line_start":435,"line_end":435,"column_start":1,"column_end":87}},{"value":"/ | `123` | no | Expression is interpreted as `Value::Int` |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":22409,"byte_end":22471,"line_start":436,"line_end":436,"column_start":1,"column_end":63}},{"value":"/ | `true` | no | Expression is interpreted as `Value::Bool` |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":22472,"byte_end":22536,"line_start":437,"line_end":437,"column_start":1,"column_end":65}},{"value":"/ | `.34` | no | Expression is interpreted as `Value::Float` |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":22537,"byte_end":22601,"line_start":438,"line_end":438,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":22602,"byte_end":22605,"line_start":439,"line_end":439,"column_start":1,"column_end":4}},{"value":"/ Variables have a precedence of 200.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":22606,"byte_end":22645,"line_start":440,"line_end":440,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":22646,"byte_end":22649,"line_start":441,"line_end":441,"column_start":1,"column_end":4}},{"value":"/ ### User-Defined Functions","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":22650,"byte_end":22680,"line_start":442,"line_end":442,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":22681,"byte_end":22684,"line_start":443,"line_end":443,"column_start":1,"column_end":4}},{"value":"/ This crate allows to define arbitrary functions to be used in parsed expressions.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":22685,"byte_end":22770,"line_start":444,"line_end":444,"column_start":1,"column_end":86}},{"value":"/ A function is defined as a `Function` instance, wrapping an `fn(&Value) -> EvalexprResult<Value>`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":22771,"byte_end":22873,"line_start":445,"line_end":445,"column_start":1,"column_end":103}},{"value":"/ The definition needs to be included in the [`Context`](#contexts) that is used for evaluation.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":22874,"byte_end":22972,"line_start":446,"line_end":446,"column_start":1,"column_end":99}},{"value":"/ As of now, functions cannot be defined within the expression, but that might change in the future.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":22973,"byte_end":23075,"line_start":447,"line_end":447,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":23076,"byte_end":23079,"line_start":448,"line_end":448,"column_start":1,"column_end":4}},{"value":"/ The function gets passed what ever value is directly behind it, be it a tuple or a single values.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":23080,"byte_end":23181,"line_start":449,"line_end":449,"column_start":1,"column_end":102}},{"value":"/ If there is no value behind a function, it is interpreted as a variable instead.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":23182,"byte_end":23266,"line_start":450,"line_end":450,"column_start":1,"column_end":85}},{"value":"/ More specifically, a function needs to be followed by either an opening brace `(`, another literal, or a value.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":23267,"byte_end":23382,"line_start":451,"line_end":451,"column_start":1,"column_end":116}},{"value":"/ While not including special support for multi-valued functions, they can be realized by requiring a single tuple argument.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":23383,"byte_end":23509,"line_start":452,"line_end":452,"column_start":1,"column_end":127}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":23510,"byte_end":23513,"line_start":453,"line_end":453,"column_start":1,"column_end":4}},{"value":"/ Be aware that functions need to verify the types of values that are passed to them.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":23514,"byte_end":23601,"line_start":454,"line_end":454,"column_start":1,"column_end":88}},{"value":"/ The `error` module contains some shortcuts for verification, and error types for passing a wrong value type.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":23602,"byte_end":23714,"line_start":455,"line_end":455,"column_start":1,"column_end":113}},{"value":"/ Also, most numeric functions need to distinguish between being called with integers or floating point numbers, and act accordingly.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":23715,"byte_end":23850,"line_start":456,"line_end":456,"column_start":1,"column_end":136}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":23851,"byte_end":23854,"line_start":457,"line_end":457,"column_start":1,"column_end":4}},{"value":"/ Here are some examples and counter-examples on expressions that are interpreted as function calls:","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":23855,"byte_end":23957,"line_start":458,"line_end":458,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":23958,"byte_end":23961,"line_start":459,"line_end":459,"column_start":1,"column_end":4}},{"value":"/ | Expression | Function? | Explanation |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":23962,"byte_end":24006,"line_start":460,"line_end":460,"column_start":1,"column_end":45}},{"value":"/ |------------|--------|-------------|","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24007,"byte_end":24048,"line_start":461,"line_end":461,"column_start":1,"column_end":42}},{"value":"/ | `a v` | yes | |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24049,"byte_end":24070,"line_start":462,"line_end":462,"column_start":1,"column_end":22}},{"value":"/ | `x 5.5` | yes | |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24071,"byte_end":24094,"line_start":463,"line_end":463,"column_start":1,"column_end":24}},{"value":"/ | `a (3, true)` | yes | |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24095,"byte_end":24124,"line_start":464,"line_end":464,"column_start":1,"column_end":30}},{"value":"/ | `a b 4` | yes | Call `a` with the result of calling `b` with `4` |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24125,"byte_end":24197,"line_start":465,"line_end":465,"column_start":1,"column_end":73}},{"value":"/ | `5 b` | no | Error, value cannot be followed by a literal |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24198,"byte_end":24263,"line_start":466,"line_end":466,"column_start":1,"column_end":66}},{"value":"/ | `12 3` | no | Error, value cannot be followed by a value |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24264,"byte_end":24328,"line_start":467,"line_end":467,"column_start":1,"column_end":65}},{"value":"/ | `a 5 6` | no | Error, function call cannot be followed by a value |","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24329,"byte_end":24402,"line_start":468,"line_end":468,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24403,"byte_end":24406,"line_start":469,"line_end":469,"column_start":1,"column_end":4}},{"value":"/ Functions have a precedence of 190.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24407,"byte_end":24446,"line_start":470,"line_end":470,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24447,"byte_end":24450,"line_start":471,"line_end":471,"column_start":1,"column_end":4}},{"value":"/ ### [Serde](https://serde.rs)","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24451,"byte_end":24484,"line_start":472,"line_end":472,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24485,"byte_end":24488,"line_start":473,"line_end":473,"column_start":1,"column_end":4}},{"value":"/ To use this crate with serde, the `serde_support` feature flag has to be set.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24489,"byte_end":24570,"line_start":474,"line_end":474,"column_start":1,"column_end":82}},{"value":"/ This can be done like this in the `Cargo.toml`:","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24571,"byte_end":24622,"line_start":475,"line_end":475,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24623,"byte_end":24626,"line_start":476,"line_end":476,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24627,"byte_end":24638,"line_start":477,"line_end":477,"column_start":1,"column_end":12}},{"value":"/ [dependencies]","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24639,"byte_end":24657,"line_start":478,"line_end":478,"column_start":1,"column_end":19}},{"value":"/ evalexpr = {version = \"7\", features = [\"serde_support\"]}","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24658,"byte_end":24718,"line_start":479,"line_end":479,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24719,"byte_end":24726,"line_start":480,"line_end":480,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24727,"byte_end":24730,"line_start":481,"line_end":481,"column_start":1,"column_end":4}},{"value":"/ This crate implements `serde::de::Deserialize` for its type `Node` that represents a parsed expression tree.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24731,"byte_end":24843,"line_start":482,"line_end":482,"column_start":1,"column_end":113}},{"value":"/ The implementation expects a [serde `string`](https://serde.rs/data-model.html) as input.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24844,"byte_end":24937,"line_start":483,"line_end":483,"column_start":1,"column_end":94}},{"value":"/ Example parsing with [ron format](docs.rs/ron):","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24938,"byte_end":24989,"line_start":484,"line_end":484,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24990,"byte_end":24993,"line_start":485,"line_end":485,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":24994,"byte_end":25005,"line_start":486,"line_end":486,"column_start":1,"column_end":12}},{"value":"/ # #[cfg(feature = \"serde_support\")] {","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25006,"byte_end":25047,"line_start":487,"line_end":487,"column_start":1,"column_end":42}},{"value":"/ extern crate ron;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25048,"byte_end":25069,"line_start":488,"line_end":488,"column_start":1,"column_end":22}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25070,"byte_end":25090,"line_start":489,"line_end":489,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25091,"byte_end":25094,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ let mut context = context_map!{","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25095,"byte_end":25130,"line_start":491,"line_end":491,"column_start":1,"column_end":36}},{"value":"/     \"five\" => 5","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25131,"byte_end":25150,"line_start":492,"line_end":492,"column_start":1,"column_end":20}},{"value":"/ }.unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25151,"byte_end":25199,"line_start":493,"line_end":493,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25200,"byte_end":25203,"line_start":494,"line_end":494,"column_start":1,"column_end":4}},{"value":"/ // In ron format, strings are surrounded by \"","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25204,"byte_end":25253,"line_start":495,"line_end":495,"column_start":1,"column_end":50}},{"value":"/ let serialized_free = \"\\\"five * five\\\"\";","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25254,"byte_end":25298,"line_start":496,"line_end":496,"column_start":1,"column_end":45}},{"value":"/ match ron::de::from_str::<Node>(serialized_free) {","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25299,"byte_end":25353,"line_start":497,"line_end":497,"column_start":1,"column_end":55}},{"value":"/     Ok(free) => assert_eq!(free.eval_with_context(&context), Ok(Value::from(25))),","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25354,"byte_end":25440,"line_start":498,"line_end":498,"column_start":1,"column_end":87}},{"value":"/     Err(error) => {","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25441,"byte_end":25464,"line_start":499,"line_end":499,"column_start":1,"column_end":24}},{"value":"/         () // Handle error","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25465,"byte_end":25495,"line_start":500,"line_end":500,"column_start":1,"column_end":31}},{"value":"/     }","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25496,"byte_end":25505,"line_start":501,"line_end":501,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25506,"byte_end":25511,"line_start":502,"line_end":502,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25512,"byte_end":25519,"line_start":503,"line_end":503,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25520,"byte_end":25527,"line_start":504,"line_end":504,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25528,"byte_end":25531,"line_start":505,"line_end":505,"column_start":1,"column_end":4}},{"value":"/ With `serde`, expressions can be integrated into arbitrarily complex data.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25532,"byte_end":25610,"line_start":506,"line_end":506,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25611,"byte_end":25614,"line_start":507,"line_end":507,"column_start":1,"column_end":4}},{"value":"/ The crate also implements `Serialize` and `Deserialize` for the `HashMapContext`,","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25615,"byte_end":25700,"line_start":508,"line_end":508,"column_start":1,"column_end":86}},{"value":"/ but note that only the variables get (de)serialized, not the functions.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25701,"byte_end":25776,"line_start":509,"line_end":509,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25777,"byte_end":25780,"line_start":510,"line_end":510,"column_start":1,"column_end":4}},{"value":"/ ## License","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25781,"byte_end":25795,"line_start":511,"line_end":511,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25796,"byte_end":25799,"line_start":512,"line_end":512,"column_start":1,"column_end":4}},{"value":"/ This crate is primarily distributed under the terms of the MIT license.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25800,"byte_end":25875,"line_start":513,"line_end":513,"column_start":1,"column_end":76}},{"value":"/ See [LICENSE](LICENSE) for details.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25876,"byte_end":25915,"line_start":514,"line_end":514,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25916,"byte_end":25919,"line_start":515,"line_end":515,"column_start":1,"column_end":4}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25921,"byte_end":25943,"line_start":517,"line_end":517,"column_start":1,"column_end":23}},{"value":"forbid(unsafe_code)","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":25944,"byte_end":25967,"line_start":518,"line_end":518,"column_start":1,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":27475,"byte_end":27482,"line_start":18,"line_end":18,"column_start":11,"column_end":18},"name":"Context","qualname":"::context::Context","value":"Context","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":87}],"decl_id":null,"docs":" An immutable context.\n","sig":null,"attributes":[{"value":"/ An immutable context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":27439,"byte_end":27464,"line_start":17,"line_end":17,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":27558,"byte_end":27567,"line_start":20,"line_end":20,"column_start":8,"column_end":17},"name":"get_value","qualname":"::context::Context::get_value","value":"pub fn get_value(&Self, &str) -> Option<&Value>","parent":{"krate":0,"index":85},"children":[],"decl_id":null,"docs":" Returns the value that is linked to the given identifier.\n","sig":null,"attributes":[{"value":"/ Returns the value that is linked to the given identifier.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":27489,"byte_end":27550,"line_start":19,"line_end":19,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":27835,"byte_end":27848,"line_start":24,"line_end":24,"column_start":8,"column_end":21},"name":"call_function","qualname":"::context::Context::call_function","value":"pub fn call_function(&Self, &str, &Value) -> EvalexprResult<Value>","parent":{"krate":0,"index":85},"children":[],"decl_id":null,"docs":" Calls the function that is linked to the given identifier with the given argument.\n If no function with the given identifier is found, this method returns `EvalexprError::FunctionIdentifierNotFound`.\n","sig":null,"attributes":[{"value":"/ Calls the function that is linked to the given identifier with the given argument.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":27617,"byte_end":27703,"line_start":22,"line_end":22,"column_start":5,"column_end":91}},{"value":"/ If no function with the given identifier is found, this method returns `EvalexprError::FunctionIdentifierNotFound`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":27708,"byte_end":27827,"line_start":23,"line_end":23,"column_start":5,"column_end":124}}]},{"kind":"Trait","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":27981,"byte_end":28008,"line_start":28,"line_end":28,"column_start":11,"column_end":38},"name":"ContextWithMutableVariables","qualname":"::context::ContextWithMutableVariables","value":"ContextWithMutableVariables: Context","parent":null,"children":[{"krate":0,"index":89}],"decl_id":null,"docs":" A context that allows to assign to variables.\n","sig":null,"attributes":[{"value":"/ A context that allows to assign to variables.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":27921,"byte_end":27970,"line_start":27,"line_end":27,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":28099,"byte_end":28108,"line_start":30,"line_end":30,"column_start":8,"column_end":17},"name":"set_value","qualname":"::context::ContextWithMutableVariables::set_value","value":"pub fn set_value(&mut Self, String, Value) -> EvalexprResult<()>","parent":{"krate":0,"index":88},"children":[],"decl_id":null,"docs":" Sets the variable with the given identifier to the given value.\n","sig":null,"attributes":[{"value":"/ Sets the variable with the given identifier to the given value.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":28024,"byte_end":28091,"line_start":29,"line_end":29,"column_start":5,"column_end":72}}]},{"kind":"Trait","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":28306,"byte_end":28333,"line_start":36,"line_end":36,"column_start":11,"column_end":38},"name":"ContextWithMutableFunctions","qualname":"::context::ContextWithMutableFunctions","value":"ContextWithMutableFunctions: Context","parent":null,"children":[{"krate":0,"index":91}],"decl_id":null,"docs":" A context that allows to assign to function identifiers.\n","sig":null,"attributes":[{"value":"/ A context that allows to assign to function identifiers.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":28235,"byte_end":28295,"line_start":35,"line_end":35,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":28427,"byte_end":28439,"line_start":38,"line_end":38,"column_start":8,"column_end":20},"name":"set_function","qualname":"::context::ContextWithMutableFunctions::set_function","value":"pub fn set_function(&mut Self, String, Function) -> EvalexprResult<()>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Sets the function with the given identifier to the given function.\n","sig":null,"attributes":[{"value":"/ Sets the function with the given identifier to the given function.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":28349,"byte_end":28419,"line_start":37,"line_end":37,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":635},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":29092,"byte_end":29104,"line_start":54,"line_end":54,"column_start":12,"column_end":24},"name":"EmptyContext","qualname":"::context::EmptyContext","value":"","parent":null,"children":[],"decl_id":null,"docs":" A context that returns `None` for each identifier.\n","sig":null,"attributes":[{"value":"/ A context that returns `None` for each identifier.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":29000,"byte_end":29054,"line_start":52,"line_end":52,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":641},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":29881,"byte_end":29895,"line_start":75,"line_end":75,"column_start":12,"column_end":26},"name":"HashMapContext","qualname":"::context::HashMapContext","value":"HashMapContext {  }","parent":null,"children":[{"krate":0,"index":642},{"krate":0,"index":643}],"decl_id":null,"docs":" A context that stores its mappings in hash maps.","sig":null,"attributes":[{"value":"/ A context that stores its mappings in hash maps.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":29425,"byte_end":29477,"line_start":68,"line_end":68,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":29478,"byte_end":29481,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ *Value and function mappings are stored independently, meaning that there can be a function and a value with the same identifier.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":29482,"byte_end":29616,"line_start":70,"line_end":70,"column_start":1,"column_end":135}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":29617,"byte_end":29620,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ This context is type-safe, meaning that an identifier that is assigned a value of some type once cannot be assigned a value of another type.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":29621,"byte_end":29765,"line_start":72,"line_end":72,"column_start":1,"column_end":145}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":30127,"byte_end":30130,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"new","qualname":"<HashMapContext>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `HashMapContext` with no mappings.\n","sig":null,"attributes":[{"value":"/ Constructs a `HashMapContext` with no mappings.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":30064,"byte_end":30115,"line_start":82,"line_end":82,"column_start":5,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":117},{"krate":0,"index":120},{"krate":0,"index":650},{"krate":0,"index":729},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":130},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157}],"decl_id":null,"docs":" The `error` module contains the `Error` enum that contains all error types used by this crate.","sig":null,"attributes":[{"value":"/ The `error` module contains the `Error` enum that contains all error types used by this crate.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":34208,"byte_end":34306,"line_start":1,"line_end":1,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":34307,"byte_end":34310,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The `Error` enum implements constructors for its struct variants, because those are ugly to construct.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":34311,"byte_end":34417,"line_start":3,"line_end":3,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":34418,"byte_end":34421,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The module also contains some helper functions starting with `expect_` that check for a condition and return `Err(_)` if the condition is not fulfilled.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":34422,"byte_end":34578,"line_start":5,"line_end":5,"column_start":1,"column_end":157}},{"value":"/ They are meant as shortcuts to not write the same error checking code everywhere.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":34579,"byte_end":34664,"line_start":6,"line_end":6,"column_start":1,"column_end":86}}]},{"kind":"StructVariant","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":35086,"byte_end":35113,"line_start":21,"line_end":21,"column_start":5,"column_end":32},"name":"WrongOperatorArgumentAmount","qualname":"::error::EvalexprError::WrongOperatorArgumentAmount","value":"EvalexprError::WrongOperatorArgumentAmount { expected, actual }","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" An operator was called with a wrong amount of arguments.\n","sig":null,"attributes":[{"value":"/ An operator was called with a wrong amount of arguments.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":35021,"byte_end":35081,"line_start":20,"line_end":20,"column_start":5,"column_end":65}}]},{"kind":"StructVariant","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":35330,"byte_end":35357,"line_start":29,"line_end":29,"column_start":5,"column_end":32},"name":"WrongFunctionArgumentAmount","qualname":"::error::EvalexprError::WrongFunctionArgumentAmount","value":"EvalexprError::WrongFunctionArgumentAmount { expected, actual }","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" A function was called with a wrong amount of arguments.\n","sig":null,"attributes":[{"value":"/ A function was called with a wrong amount of arguments.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":35266,"byte_end":35325,"line_start":28,"line_end":28,"column_start":5,"column_end":64}}]},{"kind":"StructVariant","id":{"krate":0,"index":657},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":35547,"byte_end":35561,"line_start":37,"line_end":37,"column_start":5,"column_end":19},"name":"ExpectedString","qualname":"::error::EvalexprError::ExpectedString","value":"EvalexprError::ExpectedString { actual }","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" A string value was expected.\n","sig":null,"attributes":[{"value":"/ A string value was expected.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":35510,"byte_end":35542,"line_start":36,"line_end":36,"column_start":5,"column_end":37}}]},{"kind":"StructVariant","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":35668,"byte_end":35679,"line_start":43,"line_end":43,"column_start":5,"column_end":16},"name":"ExpectedInt","qualname":"::error::EvalexprError::ExpectedInt","value":"EvalexprError::ExpectedInt { actual }","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" An integer value was expected.\n","sig":null,"attributes":[{"value":"/ An integer value was expected.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":35629,"byte_end":35663,"line_start":42,"line_end":42,"column_start":5,"column_end":39}}]},{"kind":"StructVariant","id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":35783,"byte_end":35796,"line_start":49,"line_end":49,"column_start":5,"column_end":18},"name":"ExpectedFloat","qualname":"::error::EvalexprError::ExpectedFloat","value":"EvalexprError::ExpectedFloat { actual }","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" A float value was expected.\n","sig":null,"attributes":[{"value":"/ A float value was expected.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":35747,"byte_end":35778,"line_start":48,"line_end":48,"column_start":5,"column_end":36}}]},{"kind":"StructVariant","id":{"krate":0,"index":663},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":35975,"byte_end":35989,"line_start":56,"line_end":56,"column_start":5,"column_end":19},"name":"ExpectedNumber","qualname":"::error::EvalexprError::ExpectedNumber","value":"EvalexprError::ExpectedNumber { actual }","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" A numeric value was expected.\n Numeric values are the variants `Value::Int` and `Value::Float`.\n","sig":null,"attributes":[{"value":"/ A numeric value was expected.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":35864,"byte_end":35897,"line_start":54,"line_end":54,"column_start":5,"column_end":38}},{"value":"/ Numeric values are the variants `Value::Int` and `Value::Float`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":35902,"byte_end":35970,"line_start":55,"line_end":55,"column_start":5,"column_end":73}}]},{"kind":"StructVariant","id":{"krate":0,"index":665},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":36178,"byte_end":36200,"line_start":63,"line_end":63,"column_start":5,"column_end":27},"name":"ExpectedNumberOrString","qualname":"::error::EvalexprError::ExpectedNumberOrString","value":"EvalexprError::ExpectedNumberOrString { actual }","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" A numeric or string value was expected.\n Numeric values are the variants `Value::Int` and `Value::Float`.\n","sig":null,"attributes":[{"value":"/ A numeric or string value was expected.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":36057,"byte_end":36100,"line_start":61,"line_end":61,"column_start":5,"column_end":48}},{"value":"/ Numeric values are the variants `Value::Int` and `Value::Float`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":36105,"byte_end":36173,"line_start":62,"line_end":62,"column_start":5,"column_end":73}}]},{"kind":"StructVariant","id":{"krate":0,"index":667},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":36306,"byte_end":36321,"line_start":69,"line_end":69,"column_start":5,"column_end":20},"name":"ExpectedBoolean","qualname":"::error::EvalexprError::ExpectedBoolean","value":"EvalexprError::ExpectedBoolean { actual }","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" A boolean value was expected.\n","sig":null,"attributes":[{"value":"/ A boolean value was expected.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":36268,"byte_end":36301,"line_start":68,"line_end":68,"column_start":5,"column_end":38}}]},{"kind":"StructVariant","id":{"krate":0,"index":669},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":36425,"byte_end":36438,"line_start":75,"line_end":75,"column_start":5,"column_end":18},"name":"ExpectedTuple","qualname":"::error::EvalexprError::ExpectedTuple","value":"EvalexprError::ExpectedTuple { actual }","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" A tuple value was expected.\n","sig":null,"attributes":[{"value":"/ A tuple value was expected.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":36389,"byte_end":36420,"line_start":74,"line_end":74,"column_start":5,"column_end":36}}]},{"kind":"StructVariant","id":{"krate":0,"index":671},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":36562,"byte_end":36583,"line_start":81,"line_end":81,"column_start":5,"column_end":26},"name":"ExpectedFixedLenTuple","qualname":"::error::EvalexprError::ExpectedFixedLenTuple","value":"EvalexprError::ExpectedFixedLenTuple { expected_len, actual }","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" A tuple value of a certain length was expected.\n","sig":null,"attributes":[{"value":"/ A tuple value of a certain length was expected.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":36506,"byte_end":36557,"line_start":80,"line_end":80,"column_start":5,"column_end":56}}]},{"kind":"StructVariant","id":{"krate":0,"index":674},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":36746,"byte_end":36759,"line_start":89,"line_end":89,"column_start":5,"column_end":18},"name":"ExpectedEmpty","qualname":"::error::EvalexprError::ExpectedEmpty","value":"EvalexprError::ExpectedEmpty { actual }","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" An empty value was expected.\n","sig":null,"attributes":[{"value":"/ An empty value was expected.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":36709,"byte_end":36741,"line_start":88,"line_end":88,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":676},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":36916,"byte_end":36934,"line_start":96,"line_end":96,"column_start":5,"column_end":23},"name":"AppendedToLeafNode","qualname":"::error::EvalexprError::AppendedToLeafNode","value":"EvalexprError::AppendedToLeafNode","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" Tried to append a child to a leaf node.\n Leaf nodes cannot have children.\n","sig":null,"attributes":[{"value":"/ Tried to append a child to a leaf node.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":36827,"byte_end":36870,"line_start":94,"line_end":94,"column_start":5,"column_end":48}},{"value":"/ Leaf nodes cannot have children.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":36875,"byte_end":36911,"line_start":95,"line_end":95,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":678},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":37121,"byte_end":37140,"line_start":101,"line_end":101,"column_start":5,"column_end":24},"name":"PrecedenceViolation","qualname":"::error::EvalexprError::PrecedenceViolation","value":"EvalexprError::PrecedenceViolation","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" Tried to append a child to a node such that the precedence of the child is not higher.\n This error should never occur.\n If it does, please file a bug report.\n","sig":null,"attributes":[{"value":"/ Tried to append a child to a node such that the precedence of the child is not higher.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":36941,"byte_end":37031,"line_start":98,"line_end":98,"column_start":5,"column_end":95}},{"value":"/ This error should never occur.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":37036,"byte_end":37070,"line_start":99,"line_end":99,"column_start":5,"column_end":39}},{"value":"/ If it does, please file a bug report.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":37075,"byte_end":37116,"line_start":100,"line_end":100,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":680},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":37227,"byte_end":37253,"line_start":104,"line_end":104,"column_start":5,"column_end":31},"name":"VariableIdentifierNotFound","qualname":"::error::EvalexprError::VariableIdentifierNotFound","value":"EvalexprError::VariableIdentifierNotFound(String)","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" A `VariableIdentifier` operation did not find its value in the context.\n","sig":null,"attributes":[{"value":"/ A `VariableIdentifier` operation did not find its value in the context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":37147,"byte_end":37222,"line_start":103,"line_end":103,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":683},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":37348,"byte_end":37374,"line_start":107,"line_end":107,"column_start":5,"column_end":31},"name":"FunctionIdentifierNotFound","qualname":"::error::EvalexprError::FunctionIdentifierNotFound","value":"EvalexprError::FunctionIdentifierNotFound(String)","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" A `FunctionIdentifier` operation did not find its value in the context.\n","sig":null,"attributes":[{"value":"/ A `FunctionIdentifier` operation did not find its value in the context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":37268,"byte_end":37343,"line_start":106,"line_end":106,"column_start":5,"column_end":80}}]},{"kind":"StructVariant","id":{"krate":0,"index":686},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":37537,"byte_end":37546,"line_start":111,"line_end":111,"column_start":5,"column_end":14},"name":"TypeError","qualname":"::error::EvalexprError::TypeError","value":"EvalexprError::TypeError { expected, actual }","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" A value has the wrong type.\n Only use this if there is no other error that describes the expected and provided types in more detail.\n","sig":null,"attributes":[{"value":"/ A value has the wrong type.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":37389,"byte_end":37420,"line_start":109,"line_end":109,"column_start":5,"column_end":36}},{"value":"/ Only use this if there is no other error that describes the expected and provided types in more detail.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":37425,"byte_end":37532,"line_start":110,"line_end":110,"column_start":5,"column_end":112}}]},{"kind":"StructVariant","id":{"krate":0,"index":689},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":37743,"byte_end":37763,"line_start":119,"line_end":119,"column_start":5,"column_end":25},"name":"WrongTypeCombination","qualname":"::error::EvalexprError::WrongTypeCombination","value":"EvalexprError::WrongTypeCombination { operator, actual }","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" An operator is used with a wrong combination of types.\n","sig":null,"attributes":[{"value":"/ An operator is used with a wrong combination of types.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":37680,"byte_end":37738,"line_start":118,"line_end":118,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":692},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":38045,"byte_end":38060,"line_start":127,"line_end":127,"column_start":5,"column_end":20},"name":"UnmatchedLBrace","qualname":"::error::EvalexprError::UnmatchedLBrace","value":"EvalexprError::UnmatchedLBrace","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" An opening brace without a matching closing brace was found.\n","sig":null,"attributes":[{"value":"/ An opening brace without a matching closing brace was found.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":37976,"byte_end":38040,"line_start":126,"line_end":126,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":694},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":38135,"byte_end":38150,"line_start":130,"line_end":130,"column_start":5,"column_end":20},"name":"UnmatchedRBrace","qualname":"::error::EvalexprError::UnmatchedRBrace","value":"EvalexprError::UnmatchedRBrace","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" A closing brace without a matching opening brace was found.\n","sig":null,"attributes":[{"value":"/ A closing brace without a matching opening brace was found.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":38067,"byte_end":38130,"line_start":129,"line_end":129,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":696},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":38371,"byte_end":38400,"line_start":134,"line_end":134,"column_start":5,"column_end":34},"name":"MissingOperatorOutsideOfBrace","qualname":"::error::EvalexprError::MissingOperatorOutsideOfBrace","value":"EvalexprError::MissingOperatorOutsideOfBrace","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" Left of an opening brace or right of a closing brace is a token that does not expect the brace next to it.\n For example, writing `4(5)` would yield this error, as the `4` does not have any operands.\n","sig":null,"attributes":[{"value":"/ Left of an opening brace or right of a closing brace is a token that does not expect the brace next to it.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":38157,"byte_end":38267,"line_start":132,"line_end":132,"column_start":5,"column_end":115}},{"value":"/ For example, writing `4(5)` would yield this error, as the `4` does not have any operands.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":38272,"byte_end":38366,"line_start":133,"line_end":133,"column_start":5,"column_end":99}}]},{"kind":"StructVariant","id":{"krate":0,"index":698},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":38671,"byte_end":38692,"line_start":139,"line_end":139,"column_start":5,"column_end":26},"name":"UnmatchedPartialToken","qualname":"::error::EvalexprError::UnmatchedPartialToken","value":"EvalexprError::UnmatchedPartialToken { first, second }","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" A `PartialToken` is unmatched, such that it cannot be combined into a full `Token`.\n This happens if for example a single `=` is found, surrounded by whitespace.\n It is not a token, but it is part of the string representation of some tokens.\n","sig":null,"attributes":[{"value":"/ A `PartialToken` is unmatched, such that it cannot be combined into a full `Token`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":38407,"byte_end":38494,"line_start":136,"line_end":136,"column_start":5,"column_end":92}},{"value":"/ This happens if for example a single `=` is found, surrounded by whitespace.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":38499,"byte_end":38579,"line_start":137,"line_end":137,"column_start":5,"column_end":85}},{"value":"/ It is not a token, but it is part of the string representation of some tokens.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":38584,"byte_end":38666,"line_start":138,"line_end":138,"column_start":5,"column_end":87}}]},{"kind":"StructVariant","id":{"krate":0,"index":701},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":39046,"byte_end":39059,"line_start":147,"line_end":147,"column_start":5,"column_end":18},"name":"AdditionError","qualname":"::error::EvalexprError::AdditionError","value":"EvalexprError::AdditionError { augend, addend }","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" An addition operation performed by Rust failed.\n","sig":null,"attributes":[{"value":"/ An addition operation performed by Rust failed.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":38990,"byte_end":39041,"line_start":146,"line_end":146,"column_start":5,"column_end":56}}]},{"kind":"StructVariant","id":{"krate":0,"index":704},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":39275,"byte_end":39291,"line_start":155,"line_end":155,"column_start":5,"column_end":21},"name":"SubtractionError","qualname":"::error::EvalexprError::SubtractionError","value":"EvalexprError::SubtractionError { minuend, subtrahend }","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" A subtraction operation performed by Rust failed.\n","sig":null,"attributes":[{"value":"/ A subtraction operation performed by Rust failed.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":39217,"byte_end":39270,"line_start":154,"line_end":154,"column_start":5,"column_end":58}}]},{"kind":"StructVariant","id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":39515,"byte_end":39528,"line_start":163,"line_end":163,"column_start":5,"column_end":18},"name":"NegationError","qualname":"::error::EvalexprError::NegationError","value":"EvalexprError::NegationError { argument }","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" A negation operation performed by Rust failed.\n","sig":null,"attributes":[{"value":"/ A negation operation performed by Rust failed.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":39460,"byte_end":39510,"line_start":162,"line_end":162,"column_start":5,"column_end":55}}]},{"kind":"StructVariant","id":{"krate":0,"index":709},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":39671,"byte_end":39690,"line_start":169,"line_end":169,"column_start":5,"column_end":24},"name":"MultiplicationError","qualname":"::error::EvalexprError::MultiplicationError","value":"EvalexprError::MultiplicationError { multiplicand, multiplier }","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" A multiplication operation performed by Rust failed.\n","sig":null,"attributes":[{"value":"/ A multiplication operation performed by Rust failed.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":39610,"byte_end":39666,"line_start":168,"line_end":168,"column_start":5,"column_end":61}}]},{"kind":"StructVariant","id":{"krate":0,"index":712},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":39925,"byte_end":39938,"line_start":177,"line_end":177,"column_start":5,"column_end":18},"name":"DivisionError","qualname":"::error::EvalexprError::DivisionError","value":"EvalexprError::DivisionError { dividend, divisor }","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" A division operation performed by Rust failed.\n","sig":null,"attributes":[{"value":"/ A division operation performed by Rust failed.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":39870,"byte_end":39920,"line_start":176,"line_end":176,"column_start":5,"column_end":55}}]},{"kind":"StructVariant","id":{"krate":0,"index":715},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":40156,"byte_end":40171,"line_start":185,"line_end":185,"column_start":5,"column_end":20},"name":"ModulationError","qualname":"::error::EvalexprError::ModulationError","value":"EvalexprError::ModulationError { dividend, divisor }","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" A modulation operation performed by Rust failed.\n","sig":null,"attributes":[{"value":"/ A modulation operation performed by Rust failed.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":40099,"byte_end":40151,"line_start":184,"line_end":184,"column_start":5,"column_end":57}}]},{"kind":"StructVariant","id":{"krate":0,"index":718},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":40385,"byte_end":40397,"line_start":193,"line_end":193,"column_start":5,"column_end":17},"name":"InvalidRegex","qualname":"::error::EvalexprError::InvalidRegex","value":"EvalexprError::InvalidRegex { regex, message }","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" A regular expression could not be parsed\n","sig":null,"attributes":[{"value":"/ A regular expression could not be parsed","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":40336,"byte_end":40380,"line_start":192,"line_end":192,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":721},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":40640,"byte_end":40657,"line_start":201,"line_end":201,"column_start":5,"column_end":22},"name":"ContextNotMutable","qualname":"::error::EvalexprError::ContextNotMutable","value":"EvalexprError::ContextNotMutable","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" A modification was attempted on a `Context` that does not allow modifications.\n","sig":null,"attributes":[{"value":"/ A modification was attempted on a `Context` that does not allow modifications.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":40553,"byte_end":40635,"line_start":200,"line_end":200,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":723},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":40727,"byte_end":40748,"line_start":204,"line_end":204,"column_start":5,"column_end":26},"name":"IllegalEscapeSequence","qualname":"::error::EvalexprError::IllegalEscapeSequence","value":"EvalexprError::IllegalEscapeSequence(String)","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" An escape sequence within a string literal is illegal.\n","sig":null,"attributes":[{"value":"/ An escape sequence within a string literal is illegal.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":40664,"byte_end":40722,"line_start":203,"line_end":203,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":726},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":40812,"byte_end":40825,"line_start":207,"line_end":207,"column_start":5,"column_end":18},"name":"CustomMessage","qualname":"::error::EvalexprError::CustomMessage","value":"EvalexprError::CustomMessage(String)","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" A custom error explained by its message.\n","sig":null,"attributes":[{"value":"/ A custom error explained by its message.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":40763,"byte_end":40807,"line_start":206,"line_end":206,"column_start":5,"column_end":49}}]},{"kind":"Enum","id":{"krate":0,"index":650},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":35001,"byte_end":35014,"line_start":19,"line_end":19,"column_start":10,"column_end":23},"name":"EvalexprError","qualname":"::error::EvalexprError","value":"pub enum EvalexprError {\n    WrongOperatorArgumentAmount {\n            expected: usize,\n            actual: usize,\n        },\n    WrongFunctionArgumentAmount {\n            expected: usize,\n            actual: usize,\n        },\n    ExpectedString {\n            actual: Value,\n        },\n    ExpectedInt {\n            actual: Value,\n        },\n    ExpectedFloat {\n            actual: Value,\n        },\n    ExpectedNumber {\n            actual: Value,\n        },\n    ExpectedNumberOrString {\n            actual: Value,\n        },\n    ExpectedBoolean {\n            actual: Value,\n        },\n    ExpectedTuple {\n            actual: Value,\n        },\n    ExpectedFixedLenTuple {\n            expected_len: usize,\n            actual: Value,\n        },\n    ExpectedEmpty {\n            actual: Value,\n        },\n    AppendedToLeafNode,\n    PrecedenceViolation,\n    VariableIdentifierNotFound(String),\n    FunctionIdentifierNotFound(String),\n    TypeError {\n            expected: Vec<ValueType>,\n            actual: Value,\n        },\n    WrongTypeCombination {\n            operator: Operator,\n            actual: Vec<ValueType>,\n        },\n    UnmatchedLBrace,\n    UnmatchedRBrace,\n    MissingOperatorOutsideOfBrace,\n    UnmatchedPartialToken {\n            first: PartialToken,\n            second: Option<PartialToken>,\n        },\n    AdditionError {\n            augend: Value,\n            addend: Value,\n        },\n    SubtractionError {\n            minuend: Value,\n            subtrahend: Value,\n        },\n    NegationError {\n            argument: Value,\n        },\n    MultiplicationError {\n            multiplicand: Value,\n            multiplier: Value,\n        },\n    DivisionError {\n            dividend: Value,\n            divisor: Value,\n        },\n    ModulationError {\n            dividend: Value,\n            divisor: Value,\n        },\n    InvalidRegex {\n            regex: String,\n            message: String,\n        },\n    ContextNotMutable,\n    IllegalEscapeSequence(String),\n    CustomMessage(String),\n}","parent":null,"children":[{"krate":0,"index":651},{"krate":0,"index":654},{"krate":0,"index":657},{"krate":0,"index":659},{"krate":0,"index":661},{"krate":0,"index":663},{"krate":0,"index":665},{"krate":0,"index":667},{"krate":0,"index":669},{"krate":0,"index":671},{"krate":0,"index":674},{"krate":0,"index":676},{"krate":0,"index":678},{"krate":0,"index":680},{"krate":0,"index":683},{"krate":0,"index":686},{"krate":0,"index":689},{"krate":0,"index":692},{"krate":0,"index":694},{"krate":0,"index":696},{"krate":0,"index":698},{"krate":0,"index":701},{"krate":0,"index":704},{"krate":0,"index":707},{"krate":0,"index":709},{"krate":0,"index":712},{"krate":0,"index":715},{"krate":0,"index":718},{"krate":0,"index":721},{"krate":0,"index":723},{"krate":0,"index":726}],"decl_id":null,"docs":" Errors used in this crate.\n","sig":null,"attributes":[{"value":"/ Errors used in this crate.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":34915,"byte_end":34945,"line_start":16,"line_end":16,"column_start":1,"column_end":31}},{"value":"non_exhaustive","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":34974,"byte_end":34991,"line_start":18,"line_end":18,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":41275,"byte_end":41285,"line_start":220,"line_end":220,"column_start":12,"column_end":22},"name":"type_error","qualname":"<EvalexprError>::type_error","value":"pub fn type_error(Value, Vec<ValueType>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs `EvalexprError::TypeError{actual, expected}`.\n","sig":null,"attributes":[{"value":"/ Constructs `EvalexprError::TypeError{actual, expected}`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":41203,"byte_end":41263,"line_start":219,"line_end":219,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":41485,"byte_end":41507,"line_start":225,"line_end":225,"column_start":12,"column_end":34},"name":"wrong_type_combination","qualname":"<EvalexprError>::wrong_type_combination","value":"pub fn wrong_type_combination(Operator, Vec<ValueType>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs `EvalexprError::WrongTypeCombination{operator, actual}`.\n","sig":null,"attributes":[{"value":"/ Constructs `EvalexprError::WrongTypeCombination{operator, actual}`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":41402,"byte_end":41473,"line_start":224,"line_end":224,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":41705,"byte_end":41720,"line_start":230,"line_end":230,"column_start":12,"column_end":27},"name":"expected_string","qualname":"<EvalexprError>::expected_string","value":"pub fn expected_string(Value) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs `EvalexprError::ExpectedString{actual}`.\n","sig":null,"attributes":[{"value":"/ Constructs `EvalexprError::ExpectedString{actual}`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":41638,"byte_end":41693,"line_start":229,"line_end":229,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":41870,"byte_end":41882,"line_start":235,"line_end":235,"column_start":12,"column_end":24},"name":"expected_int","qualname":"<EvalexprError>::expected_int","value":"pub fn expected_int(Value) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs `EvalexprError::ExpectedInt{actual}`.\n","sig":null,"attributes":[{"value":"/ Constructs `EvalexprError::ExpectedInt{actual}`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":41806,"byte_end":41858,"line_start":234,"line_end":234,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":42031,"byte_end":42045,"line_start":240,"line_end":240,"column_start":12,"column_end":26},"name":"expected_float","qualname":"<EvalexprError>::expected_float","value":"pub fn expected_float(Value) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs `EvalexprError::ExpectedFloat{actual}`.\n","sig":null,"attributes":[{"value":"/ Constructs `EvalexprError::ExpectedFloat{actual}`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":41965,"byte_end":42019,"line_start":239,"line_end":239,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":42197,"byte_end":42212,"line_start":245,"line_end":245,"column_start":12,"column_end":27},"name":"expected_number","qualname":"<EvalexprError>::expected_number","value":"pub fn expected_number(Value) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs `EvalexprError::ExpectedNumber{actual}`.\n","sig":null,"attributes":[{"value":"/ Constructs `EvalexprError::ExpectedNumber{actual}`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":42130,"byte_end":42185,"line_start":244,"line_end":244,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":42373,"byte_end":42398,"line_start":250,"line_end":250,"column_start":12,"column_end":37},"name":"expected_number_or_string","qualname":"<EvalexprError>::expected_number_or_string","value":"pub fn expected_number_or_string(Value) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs `EvalexprError::ExpectedNumberOrString{actual}`.\n","sig":null,"attributes":[{"value":"/ Constructs `EvalexprError::ExpectedNumberOrString{actual}`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":42298,"byte_end":42361,"line_start":249,"line_end":249,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":42560,"byte_end":42576,"line_start":255,"line_end":255,"column_start":12,"column_end":28},"name":"expected_boolean","qualname":"<EvalexprError>::expected_boolean","value":"pub fn expected_boolean(Value) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs `EvalexprError::ExpectedBoolean{actual}`.\n","sig":null,"attributes":[{"value":"/ Constructs `EvalexprError::ExpectedBoolean{actual}`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":42492,"byte_end":42548,"line_start":254,"line_end":254,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":42729,"byte_end":42743,"line_start":260,"line_end":260,"column_start":12,"column_end":26},"name":"expected_tuple","qualname":"<EvalexprError>::expected_tuple","value":"pub fn expected_tuple(Value) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs `EvalexprError::ExpectedTuple{actual}`.\n","sig":null,"attributes":[{"value":"/ Constructs `EvalexprError::ExpectedTuple{actual}`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":42663,"byte_end":42717,"line_start":259,"line_end":259,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":42916,"byte_end":42940,"line_start":265,"line_end":265,"column_start":12,"column_end":36},"name":"expected_fixed_len_tuple","qualname":"<EvalexprError>::expected_fixed_len_tuple","value":"pub fn expected_fixed_len_tuple(usize, Value) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs `EvalexprError::ExpectedFixedLenTuple{expected_len, actual}`.\n","sig":null,"attributes":[{"value":"/ Constructs `EvalexprError::ExpectedFixedLenTuple{expected_len, actual}`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":42828,"byte_end":42904,"line_start":264,"line_end":264,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":43167,"byte_end":43181,"line_start":273,"line_end":273,"column_start":12,"column_end":26},"name":"expected_empty","qualname":"<EvalexprError>::expected_empty","value":"pub fn expected_empty(Value) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs `EvalexprError::ExpectedEmpty{actual}`.\n","sig":null,"attributes":[{"value":"/ Constructs `EvalexprError::ExpectedEmpty{actual}`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":43101,"byte_end":43155,"line_start":272,"line_end":272,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":45069,"byte_end":45082,"line_start":327,"line_end":327,"column_start":12,"column_end":25},"name":"invalid_regex","qualname":"<EvalexprError>::invalid_regex","value":"pub fn invalid_regex(String, String) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs `EvalexprError::InvalidRegex(regex)`\n","sig":null,"attributes":[{"value":"/ Constructs `EvalexprError::InvalidRegex(regex)`","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":45006,"byte_end":45057,"line_start":326,"line_end":326,"column_start":5,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":45728,"byte_end":45759,"line_start":347,"line_end":347,"column_start":8,"column_end":39},"name":"expect_function_argument_amount","qualname":"::error::expect_function_argument_amount","value":"pub fn expect_function_argument_amount(usize, usize) -> EvalexprResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Ok(())` if the actual and expected parameters are equal, and `Err(Error::WrongFunctionArgumentAmount)` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `Ok(())` if the actual and expected parameters are equal, and `Err(Error::WrongFunctionArgumentAmount)` otherwise.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":45594,"byte_end":45720,"line_start":346,"line_end":346,"column_start":1,"column_end":127}}]},{"kind":"Function","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":46053,"byte_end":46076,"line_start":358,"line_end":358,"column_start":8,"column_end":31},"name":"expect_number_or_string","qualname":"::error::expect_number_or_string","value":"pub fn expect_number_or_string(&Value) -> EvalexprResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Ok(())` if the given value is a string or a numeric\n","sig":null,"attributes":[{"value":"/ Returns `Ok(())` if the given value is a string or a numeric","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":45981,"byte_end":46045,"line_start":357,"line_end":357,"column_start":1,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":46390,"byte_end":46404,"line_start":368,"line_end":368,"column_start":10,"column_end":24},"name":"EvalexprResult","qualname":"::error::EvalexprResult","value":"Result<T, EvalexprError>","parent":null,"children":[],"decl_id":null,"docs":" Standard result type used by this crate.\n","sig":null,"attributes":[{"value":"/ Standard result type used by this crate.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":46336,"byte_end":46380,"line_start":367,"line_end":367,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":53930,"byte_end":53938,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"Function","qualname":"::function::Function","value":"Function {  }","parent":null,"children":[{"krate":0,"index":227}],"decl_id":null,"docs":" A user-defined function.\n Functions can be used in expressions by storing them in a `Context`.","sig":null,"attributes":[{"value":"/ A user-defined function.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":53485,"byte_end":53513,"line_start":27,"line_end":27,"column_start":1,"column_end":29}},{"value":"/ Functions can be used in expressions by storing them in a `Context`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":53514,"byte_end":53586,"line_start":28,"line_end":28,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":53587,"byte_end":53590,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":53591,"byte_end":53605,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":53606,"byte_end":53609,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":53610,"byte_end":53621,"line_start":32,"line_end":32,"column_start":1,"column_end":12}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":53622,"byte_end":53642,"line_start":33,"line_end":33,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":53643,"byte_end":53646,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ let mut context = HashMapContext::new();","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":53647,"byte_end":53691,"line_start":35,"line_end":35,"column_start":1,"column_end":45}},{"value":"/ context.set_function(\"id\".into(), Function::new(|argument| {","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":53692,"byte_end":53756,"line_start":36,"line_end":36,"column_start":1,"column_end":65}},{"value":"/     Ok(argument.clone())","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":53757,"byte_end":53785,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ })).unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":53786,"byte_end":53836,"line_start":38,"line_end":38,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(eval_with_context(\"id(4)\", &context), Ok(Value::from(4)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":53837,"byte_end":53910,"line_start":39,"line_end":39,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":53911,"byte_end":53918,"line_start":40,"line_end":40,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":54239,"byte_end":54242,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<Function>::new","value":"pub fn new<F>(F) -> Self where F: Fn(&Value) -> EvalexprResult<Value>,\nF: Send + Sync + 'static, F: Clone","parent":null,"children":[],"decl_id":null,"docs":" Creates a user-defined function.","sig":null,"attributes":[{"value":"/ Creates a user-defined function.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":54138,"byte_end":54174,"line_start":54,"line_end":54,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":54179,"byte_end":54182,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ The `function` is boxed for storage.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":54187,"byte_end":54227,"line_start":56,"line_end":56,"column_start":5,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":282},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62532,"byte_end":62536,"line_start":17,"line_end":17,"column_start":8,"column_end":12},"name":"eval","qualname":"::interface::eval","value":"pub fn eval(&str) -> EvalexprResult<Value>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62257,"byte_end":62298,"line_start":6,"line_end":6,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62299,"byte_end":62302,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62303,"byte_end":62317,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62318,"byte_end":62321,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62322,"byte_end":62333,"line_start":10,"line_end":10,"column_start":1,"column_end":12}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62334,"byte_end":62354,"line_start":11,"line_end":11,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62355,"byte_end":62358,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(eval(\"1 + 2 + 3\"), Ok(Value::from(6)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62359,"byte_end":62413,"line_start":13,"line_end":13,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62414,"byte_end":62421,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62422,"byte_end":62425,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62426,"byte_end":62524,"line_start":16,"line_end":16,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":63286,"byte_end":63303,"line_start":36,"line_end":36,"column_start":8,"column_end":25},"name":"eval_with_context","qualname":"::interface::eval_with_context","value":"pub fn eval_with_context<C: Context>(&str, &C) -> EvalexprResult<Value>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string with the given context.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string with the given context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62643,"byte_end":62707,"line_start":21,"line_end":21,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62708,"byte_end":62711,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62712,"byte_end":62726,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62727,"byte_end":62730,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62731,"byte_end":62742,"line_start":25,"line_end":25,"column_start":1,"column_end":12}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62743,"byte_end":62763,"line_start":26,"line_end":26,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62764,"byte_end":62767,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ let mut context = HashMapContext::new();","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62768,"byte_end":62812,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/ context.set_value(\"one\".into(), 1.into()).unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62813,"byte_end":62901,"line_start":29,"line_end":29,"column_start":1,"column_end":89}},{"value":"/ context.set_value(\"two\".into(), 2.into()).unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62902,"byte_end":62990,"line_start":30,"line_end":30,"column_start":1,"column_end":89}},{"value":"/ context.set_value(\"three\".into(), 3.into()).unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":62991,"byte_end":63081,"line_start":31,"line_end":31,"column_start":1,"column_end":91}},{"value":"/ assert_eq!(eval_with_context(\"one + two + three\", &context), Ok(Value::from(6)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":63082,"byte_end":63167,"line_start":32,"line_end":32,"column_start":1,"column_end":86}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":63168,"byte_end":63175,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":63176,"byte_end":63179,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":63180,"byte_end":63278,"line_start":35,"line_end":35,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":285},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":64120,"byte_end":64141,"line_start":55,"line_end":55,"column_start":8,"column_end":29},"name":"eval_with_context_mut","qualname":"::interface::eval_with_context_mut","value":"pub fn eval_with_context_mut<C: ContextWithMutableVariables>(&str, &mut C)\n-> EvalexprResult<Value>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string with the given mutable context.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string with the given mutable context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":63461,"byte_end":63533,"line_start":40,"line_end":40,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":63534,"byte_end":63537,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":63538,"byte_end":63552,"line_start":42,"line_end":42,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":63553,"byte_end":63556,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":63557,"byte_end":63568,"line_start":44,"line_end":44,"column_start":1,"column_end":12}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":63569,"byte_end":63589,"line_start":45,"line_end":45,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":63590,"byte_end":63593,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ let mut context = HashMapContext::new();","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":63594,"byte_end":63638,"line_start":47,"line_end":47,"column_start":1,"column_end":45}},{"value":"/ context.set_value(\"one\".into(), 1.into()).unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":63639,"byte_end":63727,"line_start":48,"line_end":48,"column_start":1,"column_end":89}},{"value":"/ context.set_value(\"two\".into(), 2.into()).unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":63728,"byte_end":63816,"line_start":49,"line_end":49,"column_start":1,"column_end":89}},{"value":"/ context.set_value(\"three\".into(), 3.into()).unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":63817,"byte_end":63907,"line_start":50,"line_end":50,"column_start":1,"column_end":91}},{"value":"/ assert_eq!(eval_with_context_mut(\"one + two + three\", &mut context), Ok(Value::from(6)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":63908,"byte_end":64001,"line_start":51,"line_end":51,"column_start":1,"column_end":94}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":64002,"byte_end":64009,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":64010,"byte_end":64013,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":64014,"byte_end":64112,"line_start":54,"line_end":54,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":287},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":65435,"byte_end":65454,"line_start":86,"line_end":86,"column_start":8,"column_end":27},"name":"build_operator_tree","qualname":"::interface::build_operator_tree","value":"pub fn build_operator_tree(&str) -> EvalexprResult<Node>","parent":null,"children":[],"decl_id":null,"docs":" Build the operator tree for the given expression string.","sig":null,"attributes":[{"value":"/ Build the operator tree for the given expression string.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":64338,"byte_end":64398,"line_start":62,"line_end":62,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":64399,"byte_end":64402,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ The operator tree can later on be evaluated directly.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":64403,"byte_end":64460,"line_start":64,"line_end":64,"column_start":1,"column_end":58}},{"value":"/ This saves runtime if a single expression should be evaluated multiple times, for example with differing contexts.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":64461,"byte_end":64579,"line_start":65,"line_end":65,"column_start":1,"column_end":119}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":64580,"byte_end":64583,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":64584,"byte_end":64598,"line_start":67,"line_end":67,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":64599,"byte_end":64602,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":64603,"byte_end":64614,"line_start":69,"line_end":69,"column_start":1,"column_end":12}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":64615,"byte_end":64635,"line_start":70,"line_end":70,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":64636,"byte_end":64639,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ let precomputed = build_operator_tree(\"one + two + three\").unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":64640,"byte_end":64745,"line_start":72,"line_end":72,"column_start":1,"column_end":106}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":64746,"byte_end":64749,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ let mut context = HashMapContext::new();","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":64750,"byte_end":64794,"line_start":74,"line_end":74,"column_start":1,"column_end":45}},{"value":"/ context.set_value(\"one\".into(), 1.into()).unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":64795,"byte_end":64883,"line_start":75,"line_end":75,"column_start":1,"column_end":89}},{"value":"/ context.set_value(\"two\".into(), 2.into()).unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":64884,"byte_end":64972,"line_start":76,"line_end":76,"column_start":1,"column_end":89}},{"value":"/ context.set_value(\"three\".into(), 3.into()).unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":64973,"byte_end":65063,"line_start":77,"line_end":77,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":65064,"byte_end":65067,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(precomputed.eval_with_context(&context), Ok(Value::from(6)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":65068,"byte_end":65144,"line_start":79,"line_end":79,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":65145,"byte_end":65148,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ context.set_value(\"three\".into(), 5.into()).unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":65149,"byte_end":65239,"line_start":81,"line_end":81,"column_start":1,"column_end":91}},{"value":"/ assert_eq!(precomputed.eval_with_context(&context), Ok(Value::from(8)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":65240,"byte_end":65316,"line_start":82,"line_end":82,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":65317,"byte_end":65324,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":65325,"byte_end":65328,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":65329,"byte_end":65427,"line_start":85,"line_end":85,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":288},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":65724,"byte_end":65735,"line_start":93,"line_end":93,"column_start":8,"column_end":19},"name":"eval_string","qualname":"::interface::eval_string","value":"pub fn eval_string(&str) -> EvalexprResult<String>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string into a string.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string into a string.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":65558,"byte_end":65613,"line_start":90,"line_end":90,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":65614,"byte_end":65617,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":65618,"byte_end":65716,"line_start":92,"line_end":92,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":66018,"byte_end":66026,"line_start":100,"line_end":100,"column_start":8,"column_end":16},"name":"eval_int","qualname":"::interface::eval_int","value":"pub fn eval_int(&str) -> EvalexprResult<IntType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string into an integer.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string into an integer.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":65850,"byte_end":65907,"line_start":97,"line_end":97,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":65908,"byte_end":65911,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":65912,"byte_end":66010,"line_start":99,"line_end":99,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":66304,"byte_end":66314,"line_start":107,"line_end":107,"column_start":8,"column_end":18},"name":"eval_float","qualname":"::interface::eval_float","value":"pub fn eval_float(&str) -> EvalexprResult<FloatType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string into a float.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string into a float.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":66139,"byte_end":66193,"line_start":104,"line_end":104,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":66194,"byte_end":66197,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":66198,"byte_end":66296,"line_start":106,"line_end":106,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":66686,"byte_end":66697,"line_start":115,"line_end":115,"column_start":8,"column_end":19},"name":"eval_number","qualname":"::interface::eval_number","value":"pub fn eval_number(&str) -> EvalexprResult<FloatType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string into a float.\n If the result of the expression is an integer, it is silently converted into a float.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string into a float.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":66431,"byte_end":66485,"line_start":111,"line_end":111,"column_start":1,"column_end":55}},{"value":"/ If the result of the expression is an integer, it is silently converted into a float.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":66486,"byte_end":66575,"line_start":112,"line_end":112,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":66576,"byte_end":66579,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":66580,"byte_end":66678,"line_start":114,"line_end":114,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":66982,"byte_end":66994,"line_start":122,"line_end":122,"column_start":8,"column_end":20},"name":"eval_boolean","qualname":"::interface::eval_boolean","value":"pub fn eval_boolean(&str) -> EvalexprResult<bool>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string into a boolean.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string into a boolean.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":66815,"byte_end":66871,"line_start":119,"line_end":119,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":66872,"byte_end":66875,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":66876,"byte_end":66974,"line_start":121,"line_end":121,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":67273,"byte_end":67283,"line_start":129,"line_end":129,"column_start":8,"column_end":18},"name":"eval_tuple","qualname":"::interface::eval_tuple","value":"pub fn eval_tuple(&str) -> EvalexprResult<TupleType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string into a tuple.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string into a tuple.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":67108,"byte_end":67162,"line_start":126,"line_end":126,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":67163,"byte_end":67166,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":67167,"byte_end":67265,"line_start":128,"line_end":128,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":67572,"byte_end":67582,"line_start":136,"line_end":136,"column_start":8,"column_end":18},"name":"eval_empty","qualname":"::interface::eval_empty","value":"pub fn eval_empty(&str) -> EvalexprResult<EmptyType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string into an empty value.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string into an empty value.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":67400,"byte_end":67461,"line_start":133,"line_end":133,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":67462,"byte_end":67465,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":67466,"byte_end":67564,"line_start":135,"line_end":135,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":67888,"byte_end":67912,"line_start":143,"line_end":143,"column_start":8,"column_end":32},"name":"eval_string_with_context","qualname":"::interface::eval_string_with_context","value":"pub fn eval_string_with_context<C: Context>(&str, &C)\n-> EvalexprResult<String>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string into a string with the given context.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string into a string with the given context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":67699,"byte_end":67777,"line_start":140,"line_end":140,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":67778,"byte_end":67781,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":67782,"byte_end":67880,"line_start":142,"line_end":142,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":68375,"byte_end":68396,"line_start":154,"line_end":154,"column_start":8,"column_end":29},"name":"eval_int_with_context","qualname":"::interface::eval_int_with_context","value":"pub fn eval_int_with_context<C: Context>(&str, &C) -> EvalexprResult<IntType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string into an integer with the given context.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string into an integer with the given context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":68184,"byte_end":68264,"line_start":151,"line_end":151,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":68265,"byte_end":68268,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":68269,"byte_end":68367,"line_start":153,"line_end":153,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":68845,"byte_end":68868,"line_start":165,"line_end":165,"column_start":8,"column_end":31},"name":"eval_float_with_context","qualname":"::interface::eval_float_with_context","value":"pub fn eval_float_with_context<C: Context>(&str, &C)\n-> EvalexprResult<FloatType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string into a float with the given context.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string into a float with the given context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":68657,"byte_end":68734,"line_start":162,"line_end":162,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":68735,"byte_end":68738,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":68739,"byte_end":68837,"line_start":164,"line_end":164,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":69417,"byte_end":69441,"line_start":177,"line_end":177,"column_start":8,"column_end":32},"name":"eval_number_with_context","qualname":"::interface::eval_number_with_context","value":"pub fn eval_number_with_context<C: Context>(&str, &C)\n-> EvalexprResult<FloatType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string into a float with the given context.\n If the result of the expression is an integer, it is silently converted into a float.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string into a float with the given context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":69139,"byte_end":69216,"line_start":173,"line_end":173,"column_start":1,"column_end":78}},{"value":"/ If the result of the expression is an integer, it is silently converted into a float.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":69217,"byte_end":69306,"line_start":174,"line_end":174,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":69307,"byte_end":69310,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":69311,"byte_end":69409,"line_start":176,"line_end":176,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":69967,"byte_end":69992,"line_start":192,"line_end":192,"column_start":8,"column_end":33},"name":"eval_boolean_with_context","qualname":"::interface::eval_boolean_with_context","value":"pub fn eval_boolean_with_context<C: Context>(&str, &C) -> EvalexprResult<bool>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string into a boolean with the given context.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string into a boolean with the given context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":69777,"byte_end":69856,"line_start":189,"line_end":189,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":69857,"byte_end":69860,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":69861,"byte_end":69959,"line_start":191,"line_end":191,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":70454,"byte_end":70477,"line_start":203,"line_end":203,"column_start":8,"column_end":31},"name":"eval_tuple_with_context","qualname":"::interface::eval_tuple_with_context","value":"pub fn eval_tuple_with_context<C: Context>(&str, &C)\n-> EvalexprResult<TupleType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string into a tuple with the given context.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string into a tuple with the given context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":70266,"byte_end":70343,"line_start":200,"line_end":200,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":70344,"byte_end":70347,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":70348,"byte_end":70446,"line_start":202,"line_end":202,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":307},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":70943,"byte_end":70966,"line_start":214,"line_end":214,"column_start":8,"column_end":31},"name":"eval_empty_with_context","qualname":"::interface::eval_empty_with_context","value":"pub fn eval_empty_with_context<C: Context>(&str, &C)\n-> EvalexprResult<EmptyType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string into an empty value with the given context.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string into an empty value with the given context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":70748,"byte_end":70832,"line_start":211,"line_end":211,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":70833,"byte_end":70836,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":70837,"byte_end":70935,"line_start":213,"line_end":213,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":309},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":71433,"byte_end":71461,"line_start":225,"line_end":225,"column_start":8,"column_end":36},"name":"eval_string_with_context_mut","qualname":"::interface::eval_string_with_context_mut","value":"pub fn eval_string_with_context_mut<C: ContextWithMutableVariables>(&str,\n&mut C) -> EvalexprResult<String>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string into a string with the given mutable context.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string into a string with the given mutable context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":71236,"byte_end":71322,"line_start":222,"line_end":222,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":71323,"byte_end":71326,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":71327,"byte_end":71425,"line_start":224,"line_end":224,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":311},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":71971,"byte_end":71996,"line_start":239,"line_end":239,"column_start":8,"column_end":33},"name":"eval_int_with_context_mut","qualname":"::interface::eval_int_with_context_mut","value":"pub fn eval_int_with_context_mut<C: ContextWithMutableVariables>(&str, &mut C)\n-> EvalexprResult<IntType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string into an integer with the given mutable context.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string into an integer with the given mutable context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":71772,"byte_end":71860,"line_start":236,"line_end":236,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":71861,"byte_end":71864,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":71865,"byte_end":71963,"line_start":238,"line_end":238,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":313},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":72492,"byte_end":72519,"line_start":253,"line_end":253,"column_start":8,"column_end":35},"name":"eval_float_with_context_mut","qualname":"::interface::eval_float_with_context_mut","value":"pub fn eval_float_with_context_mut<C: ContextWithMutableVariables>(&str,\n&mut C) -> EvalexprResult<FloatType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string into a float with the given mutable context.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string into a float with the given mutable context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":72296,"byte_end":72381,"line_start":250,"line_end":250,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":72382,"byte_end":72385,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":72386,"byte_end":72484,"line_start":252,"line_end":252,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":315},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":73115,"byte_end":73143,"line_start":268,"line_end":268,"column_start":8,"column_end":36},"name":"eval_number_with_context_mut","qualname":"::interface::eval_number_with_context_mut","value":"pub fn eval_number_with_context_mut<C: ContextWithMutableVariables>(&str,\n&mut C) -> EvalexprResult<FloatType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string into a float with the given mutable context.\n If the result of the expression is an integer, it is silently converted into a float.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string into a float with the given mutable context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":72829,"byte_end":72914,"line_start":264,"line_end":264,"column_start":1,"column_end":86}},{"value":"/ If the result of the expression is an integer, it is silently converted into a float.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":72915,"byte_end":73004,"line_start":265,"line_end":265,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":73005,"byte_end":73008,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":73009,"byte_end":73107,"line_start":267,"line_end":267,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":317},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":73705,"byte_end":73734,"line_start":283,"line_end":283,"column_start":8,"column_end":37},"name":"eval_boolean_with_context_mut","qualname":"::interface::eval_boolean_with_context_mut","value":"pub fn eval_boolean_with_context_mut<C: ContextWithMutableVariables>(&str,\n&mut C) -> EvalexprResult<bool>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string into a boolean with the given mutable context.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string into a boolean with the given mutable context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":73507,"byte_end":73594,"line_start":280,"line_end":280,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":73595,"byte_end":73598,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":73599,"byte_end":73697,"line_start":282,"line_end":282,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":319},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":74243,"byte_end":74270,"line_start":297,"line_end":297,"column_start":8,"column_end":35},"name":"eval_tuple_with_context_mut","qualname":"::interface::eval_tuple_with_context_mut","value":"pub fn eval_tuple_with_context_mut<C: ContextWithMutableVariables>(&str,\n&mut C) -> EvalexprResult<TupleType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string into a tuple with the given mutable context.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string into a tuple with the given mutable context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":74047,"byte_end":74132,"line_start":294,"line_end":294,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":74133,"byte_end":74136,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":74137,"byte_end":74235,"line_start":296,"line_end":296,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":74783,"byte_end":74810,"line_start":311,"line_end":311,"column_start":8,"column_end":35},"name":"eval_empty_with_context_mut","qualname":"::interface::eval_empty_with_context_mut","value":"pub fn eval_empty_with_context_mut<C: ContextWithMutableVariables>(&str,\n&mut C) -> EvalexprResult<EmptyType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the given expression string into an empty value with the given mutable context.","sig":null,"attributes":[{"value":"/ Evaluate the given expression string into an empty value with the given mutable context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":74580,"byte_end":74672,"line_start":308,"line_end":308,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":74673,"byte_end":74676,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ *See the [crate doc](index.html) for more examples and explanations of the expression format.*","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\interface\\mod.rs","byte_start":74677,"byte_end":74775,"line_start":310,"line_end":310,"column_start":1,"column_end":99}}]},{"kind":"TupleVariant","id":{"krate":0,"index":768},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75568,"byte_end":75576,"line_start":13,"line_end":13,"column_start":5,"column_end":13},"name":"RootNode","qualname":"::operator::Operator::RootNode","value":"Operator::RootNode","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A root node in the operator tree.\n The whole expression is stored under a root node, as well as each subexpression surrounded by parentheses.\n","sig":null,"attributes":[{"value":"/ A root node in the operator tree.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75411,"byte_end":75448,"line_start":11,"line_end":11,"column_start":5,"column_end":42}},{"value":"/ The whole expression is stored under a root node, as well as each subexpression surrounded by parentheses.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75453,"byte_end":75563,"line_start":12,"line_end":12,"column_start":5,"column_end":115}}]},{"kind":"TupleVariant","id":{"krate":0,"index":770},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75619,"byte_end":75622,"line_start":16,"line_end":16,"column_start":5,"column_end":8},"name":"Add","qualname":"::operator::Operator::Add","value":"Operator::Add","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary addition operator.\n","sig":null,"attributes":[{"value":"/ A binary addition operator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75583,"byte_end":75614,"line_start":15,"line_end":15,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":772},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75667,"byte_end":75670,"line_start":18,"line_end":18,"column_start":5,"column_end":8},"name":"Sub","qualname":"::operator::Operator::Sub","value":"Operator::Sub","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary subtraction operator.\n","sig":null,"attributes":[{"value":"/ A binary subtraction operator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75628,"byte_end":75662,"line_start":17,"line_end":17,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":774},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75711,"byte_end":75714,"line_start":20,"line_end":20,"column_start":5,"column_end":8},"name":"Neg","qualname":"::operator::Operator::Neg","value":"Operator::Neg","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A unary negation operator.\n","sig":null,"attributes":[{"value":"/ A unary negation operator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75676,"byte_end":75706,"line_start":19,"line_end":19,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":776},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75762,"byte_end":75765,"line_start":22,"line_end":22,"column_start":5,"column_end":8},"name":"Mul","qualname":"::operator::Operator::Mul","value":"Operator::Mul","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary multiplication operator.\n","sig":null,"attributes":[{"value":"/ A binary multiplication operator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75720,"byte_end":75757,"line_start":21,"line_end":21,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":778},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75807,"byte_end":75810,"line_start":24,"line_end":24,"column_start":5,"column_end":8},"name":"Div","qualname":"::operator::Operator::Div","value":"Operator::Div","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary division operator.\n","sig":null,"attributes":[{"value":"/ A binary division operator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75771,"byte_end":75802,"line_start":23,"line_end":23,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":780},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75850,"byte_end":75853,"line_start":26,"line_end":26,"column_start":5,"column_end":8},"name":"Mod","qualname":"::operator::Operator::Mod","value":"Operator::Mod","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary modulo operator.\n","sig":null,"attributes":[{"value":"/ A binary modulo operator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75816,"byte_end":75845,"line_start":25,"line_end":25,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":782},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75901,"byte_end":75904,"line_start":28,"line_end":28,"column_start":5,"column_end":8},"name":"Exp","qualname":"::operator::Operator::Exp","value":"Operator::Exp","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary exponentiation operator.\n","sig":null,"attributes":[{"value":"/ A binary exponentiation operator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75859,"byte_end":75896,"line_start":27,"line_end":27,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":784},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75949,"byte_end":75951,"line_start":31,"line_end":31,"column_start":5,"column_end":7},"name":"Eq","qualname":"::operator::Operator::Eq","value":"Operator::Eq","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary equality comparator.\n","sig":null,"attributes":[{"value":"/ A binary equality comparator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75911,"byte_end":75944,"line_start":30,"line_end":30,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":786},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75997,"byte_end":76000,"line_start":33,"line_end":33,"column_start":5,"column_end":8},"name":"Neq","qualname":"::operator::Operator::Neq","value":"Operator::Neq","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary inequality comparator.\n","sig":null,"attributes":[{"value":"/ A binary inequality comparator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75957,"byte_end":75992,"line_start":32,"line_end":32,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":788},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76048,"byte_end":76050,"line_start":35,"line_end":35,"column_start":5,"column_end":7},"name":"Gt","qualname":"::operator::Operator::Gt","value":"Operator::Gt","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary greater-than comparator.\n","sig":null,"attributes":[{"value":"/ A binary greater-than comparator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76006,"byte_end":76043,"line_start":34,"line_end":34,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76096,"byte_end":76098,"line_start":37,"line_end":37,"column_start":5,"column_end":7},"name":"Lt","qualname":"::operator::Operator::Lt","value":"Operator::Lt","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary lower-than comparator.\n","sig":null,"attributes":[{"value":"/ A binary lower-than comparator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76056,"byte_end":76091,"line_start":36,"line_end":36,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":792},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76155,"byte_end":76158,"line_start":39,"line_end":39,"column_start":5,"column_end":8},"name":"Geq","qualname":"::operator::Operator::Geq","value":"Operator::Geq","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary greater-than-or-equal comparator.\n","sig":null,"attributes":[{"value":"/ A binary greater-than-or-equal comparator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76104,"byte_end":76150,"line_start":38,"line_end":38,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":794},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76213,"byte_end":76216,"line_start":41,"line_end":41,"column_start":5,"column_end":8},"name":"Leq","qualname":"::operator::Operator::Leq","value":"Operator::Leq","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary lower-than-or-equal comparator.\n","sig":null,"attributes":[{"value":"/ A binary lower-than-or-equal comparator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76164,"byte_end":76208,"line_start":40,"line_end":40,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":796},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76261,"byte_end":76264,"line_start":43,"line_end":43,"column_start":5,"column_end":8},"name":"And","qualname":"::operator::Operator::And","value":"Operator::And","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary logical and operator.\n","sig":null,"attributes":[{"value":"/ A binary logical and operator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76222,"byte_end":76256,"line_start":42,"line_end":42,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76308,"byte_end":76310,"line_start":45,"line_end":45,"column_start":5,"column_end":7},"name":"Or","qualname":"::operator::Operator::Or","value":"Operator::Or","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary logical or operator.\n","sig":null,"attributes":[{"value":"/ A binary logical or operator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76270,"byte_end":76303,"line_start":44,"line_end":44,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":800},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76355,"byte_end":76358,"line_start":47,"line_end":47,"column_start":5,"column_end":8},"name":"Not","qualname":"::operator::Operator::Not","value":"Operator::Not","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary logical not operator.\n","sig":null,"attributes":[{"value":"/ A binary logical not operator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76316,"byte_end":76350,"line_start":46,"line_end":46,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":802},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76403,"byte_end":76409,"line_start":50,"line_end":50,"column_start":5,"column_end":11},"name":"Assign","qualname":"::operator::Operator::Assign","value":"Operator::Assign","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary assignment operator.\n","sig":null,"attributes":[{"value":"/ A binary assignment operator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76365,"byte_end":76398,"line_start":49,"line_end":49,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":804},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76453,"byte_end":76462,"line_start":52,"line_end":52,"column_start":5,"column_end":14},"name":"AddAssign","qualname":"::operator::Operator::AddAssign","value":"Operator::AddAssign","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary add-assign operator.\n","sig":null,"attributes":[{"value":"/ A binary add-assign operator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76415,"byte_end":76448,"line_start":51,"line_end":51,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":806},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76511,"byte_end":76520,"line_start":54,"line_end":54,"column_start":5,"column_end":14},"name":"SubAssign","qualname":"::operator::Operator::SubAssign","value":"Operator::SubAssign","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary subtract-assign operator.\n","sig":null,"attributes":[{"value":"/ A binary subtract-assign operator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76468,"byte_end":76506,"line_start":53,"line_end":53,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":808},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76569,"byte_end":76578,"line_start":56,"line_end":56,"column_start":5,"column_end":14},"name":"MulAssign","qualname":"::operator::Operator::MulAssign","value":"Operator::MulAssign","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary multiply-assign operator.\n","sig":null,"attributes":[{"value":"/ A binary multiply-assign operator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76526,"byte_end":76564,"line_start":55,"line_end":55,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":810},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76625,"byte_end":76634,"line_start":58,"line_end":58,"column_start":5,"column_end":14},"name":"DivAssign","qualname":"::operator::Operator::DivAssign","value":"Operator::DivAssign","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary divide-assign operator.\n","sig":null,"attributes":[{"value":"/ A binary divide-assign operator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76584,"byte_end":76620,"line_start":57,"line_end":57,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":812},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76681,"byte_end":76690,"line_start":60,"line_end":60,"column_start":5,"column_end":14},"name":"ModAssign","qualname":"::operator::Operator::ModAssign","value":"Operator::ModAssign","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary modulo-assign operator.\n","sig":null,"attributes":[{"value":"/ A binary modulo-assign operator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76640,"byte_end":76676,"line_start":59,"line_end":59,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":814},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76743,"byte_end":76752,"line_start":62,"line_end":62,"column_start":5,"column_end":14},"name":"ExpAssign","qualname":"::operator::Operator::ExpAssign","value":"Operator::ExpAssign","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary exponentiate-assign operator.\n","sig":null,"attributes":[{"value":"/ A binary exponentiate-assign operator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76696,"byte_end":76738,"line_start":61,"line_end":61,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":816},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76796,"byte_end":76805,"line_start":64,"line_end":64,"column_start":5,"column_end":14},"name":"AndAssign","qualname":"::operator::Operator::AndAssign","value":"Operator::AndAssign","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary and-assign operator.\n","sig":null,"attributes":[{"value":"/ A binary and-assign operator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76758,"byte_end":76791,"line_start":63,"line_end":63,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":818},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76848,"byte_end":76856,"line_start":66,"line_end":66,"column_start":5,"column_end":13},"name":"OrAssign","qualname":"::operator::Operator::OrAssign","value":"Operator::OrAssign","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A binary or-assign operator.\n","sig":null,"attributes":[{"value":"/ A binary or-assign operator.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76811,"byte_end":76843,"line_start":65,"line_end":65,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":820},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76899,"byte_end":76904,"line_start":69,"line_end":69,"column_start":5,"column_end":10},"name":"Tuple","qualname":"::operator::Operator::Tuple","value":"Operator::Tuple","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" An n-ary tuple constructor.\n","sig":null,"attributes":[{"value":"/ An n-ary tuple constructor.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76863,"byte_end":76894,"line_start":68,"line_end":68,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":822},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76948,"byte_end":76953,"line_start":71,"line_end":71,"column_start":5,"column_end":10},"name":"Chain","qualname":"::operator::Operator::Chain","value":"Operator::Chain","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" An n-ary subexpression chain.\n","sig":null,"attributes":[{"value":"/ An n-ary subexpression chain.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76910,"byte_end":76943,"line_start":70,"line_end":70,"column_start":5,"column_end":38}}]},{"kind":"StructVariant","id":{"krate":0,"index":824},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76986,"byte_end":76991,"line_start":74,"line_end":74,"column_start":5,"column_end":10},"name":"Const","qualname":"::operator::Operator::Const","value":"Operator::Const { value }","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A constant value.\n","sig":null,"attributes":[{"value":"/ A constant value.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":76960,"byte_end":76981,"line_start":73,"line_end":73,"column_start":5,"column_end":26}}]},{"kind":"StructVariant","id":{"krate":0,"index":826},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":77100,"byte_end":77118,"line_start":79,"line_end":79,"column_start":5,"column_end":23},"name":"VariableIdentifier","qualname":"::operator::Operator::VariableIdentifier","value":"Operator::VariableIdentifier { identifier }","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A variable identifier.\n","sig":null,"attributes":[{"value":"/ A variable identifier.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":77069,"byte_end":77095,"line_start":78,"line_end":78,"column_start":5,"column_end":31}}]},{"kind":"StructVariant","id":{"krate":0,"index":828},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":77235,"byte_end":77253,"line_start":84,"line_end":84,"column_start":5,"column_end":23},"name":"FunctionIdentifier","qualname":"::operator::Operator::FunctionIdentifier","value":"Operator::FunctionIdentifier { identifier }","parent":{"krate":0,"index":767},"children":[],"decl_id":null,"docs":" A function identifier.\n","sig":null,"attributes":[{"value":"/ A function identifier.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":77204,"byte_end":77230,"line_start":83,"line_end":83,"column_start":5,"column_end":31}}]},{"kind":"Enum","id":{"krate":0,"index":767},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75396,"byte_end":75404,"line_start":10,"line_end":10,"column_start":10,"column_end":18},"name":"Operator","qualname":"::operator::Operator","value":"pub enum Operator {\n    RootNode,\n    Add,\n    Sub,\n    Neg,\n    Mul,\n    Div,\n    Mod,\n    Exp,\n    Eq,\n    Neq,\n    Gt,\n    Lt,\n    Geq,\n    Leq,\n    And,\n    Or,\n    Not,\n    Assign,\n    AddAssign,\n    SubAssign,\n    MulAssign,\n    DivAssign,\n    ModAssign,\n    ExpAssign,\n    AndAssign,\n    OrAssign,\n    Tuple,\n    Chain,\n    Const {\n            value: Value,\n        },\n    VariableIdentifier {\n            identifier: String,\n        },\n    FunctionIdentifier {\n            identifier: String,\n        },\n}","parent":null,"children":[{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":776},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":784},{"krate":0,"index":786},{"krate":0,"index":788},{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":794},{"krate":0,"index":796},{"krate":0,"index":798},{"krate":0,"index":800},{"krate":0,"index":802},{"krate":0,"index":804},{"krate":0,"index":806},{"krate":0,"index":808},{"krate":0,"index":810},{"krate":0,"index":812},{"krate":0,"index":814},{"krate":0,"index":816},{"krate":0,"index":818},{"krate":0,"index":820},{"krate":0,"index":822},{"krate":0,"index":824},{"krate":0,"index":826},{"krate":0,"index":828}],"decl_id":null,"docs":" An enum that represents operators in the operator tree.\n","sig":null,"attributes":[{"value":"/ An enum that represents operators in the operator tree.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":75292,"byte_end":75351,"line_start":8,"line_end":8,"column_start":1,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":839},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":95905,"byte_end":95909,"line_start":11,"line_end":11,"column_start":5,"column_end":9},"name":"Plus","qualname":"::token::Token::Plus","value":"Token::Plus","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":841},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":95915,"byte_end":95920,"line_start":12,"line_end":12,"column_start":5,"column_end":10},"name":"Minus","qualname":"::token::Token::Minus","value":"Token::Minus","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":843},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":95926,"byte_end":95930,"line_start":13,"line_end":13,"column_start":5,"column_end":9},"name":"Star","qualname":"::token::Token::Star","value":"Token::Star","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":845},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":95936,"byte_end":95941,"line_start":14,"line_end":14,"column_start":5,"column_end":10},"name":"Slash","qualname":"::token::Token::Slash","value":"Token::Slash","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":847},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":95947,"byte_end":95954,"line_start":15,"line_end":15,"column_start":5,"column_end":12},"name":"Percent","qualname":"::token::Token::Percent","value":"Token::Percent","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":849},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":95960,"byte_end":95963,"line_start":16,"line_end":16,"column_start":5,"column_end":8},"name":"Hat","qualname":"::token::Token::Hat","value":"Token::Hat","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":851},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":95983,"byte_end":95985,"line_start":19,"line_end":19,"column_start":5,"column_end":7},"name":"Eq","qualname":"::token::Token::Eq","value":"Token::Eq","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":853},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":95991,"byte_end":95994,"line_start":20,"line_end":20,"column_start":5,"column_end":8},"name":"Neq","qualname":"::token::Token::Neq","value":"Token::Neq","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":855},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96000,"byte_end":96002,"line_start":21,"line_end":21,"column_start":5,"column_end":7},"name":"Gt","qualname":"::token::Token::Gt","value":"Token::Gt","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":857},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96008,"byte_end":96010,"line_start":22,"line_end":22,"column_start":5,"column_end":7},"name":"Lt","qualname":"::token::Token::Lt","value":"Token::Lt","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":859},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96016,"byte_end":96019,"line_start":23,"line_end":23,"column_start":5,"column_end":8},"name":"Geq","qualname":"::token::Token::Geq","value":"Token::Geq","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":861},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96025,"byte_end":96028,"line_start":24,"line_end":24,"column_start":5,"column_end":8},"name":"Leq","qualname":"::token::Token::Leq","value":"Token::Leq","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":863},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96034,"byte_end":96037,"line_start":25,"line_end":25,"column_start":5,"column_end":8},"name":"And","qualname":"::token::Token::And","value":"Token::And","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":865},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96043,"byte_end":96045,"line_start":26,"line_end":26,"column_start":5,"column_end":7},"name":"Or","qualname":"::token::Token::Or","value":"Token::Or","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":867},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96051,"byte_end":96054,"line_start":27,"line_end":27,"column_start":5,"column_end":8},"name":"Not","qualname":"::token::Token::Not","value":"Token::Not","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":869},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96079,"byte_end":96085,"line_start":30,"line_end":30,"column_start":5,"column_end":11},"name":"LBrace","qualname":"::token::Token::LBrace","value":"Token::LBrace","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":871},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96091,"byte_end":96097,"line_start":31,"line_end":31,"column_start":5,"column_end":11},"name":"RBrace","qualname":"::token::Token::RBrace","value":"Token::RBrace","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":873},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96122,"byte_end":96128,"line_start":34,"line_end":34,"column_start":5,"column_end":11},"name":"Assign","qualname":"::token::Token::Assign","value":"Token::Assign","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":875},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96134,"byte_end":96144,"line_start":35,"line_end":35,"column_start":5,"column_end":15},"name":"PlusAssign","qualname":"::token::Token::PlusAssign","value":"Token::PlusAssign","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":877},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96150,"byte_end":96161,"line_start":36,"line_end":36,"column_start":5,"column_end":16},"name":"MinusAssign","qualname":"::token::Token::MinusAssign","value":"Token::MinusAssign","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":879},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96167,"byte_end":96177,"line_start":37,"line_end":37,"column_start":5,"column_end":15},"name":"StarAssign","qualname":"::token::Token::StarAssign","value":"Token::StarAssign","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":881},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96183,"byte_end":96194,"line_start":38,"line_end":38,"column_start":5,"column_end":16},"name":"SlashAssign","qualname":"::token::Token::SlashAssign","value":"Token::SlashAssign","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":883},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96200,"byte_end":96213,"line_start":39,"line_end":39,"column_start":5,"column_end":18},"name":"PercentAssign","qualname":"::token::Token::PercentAssign","value":"Token::PercentAssign","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":885},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96219,"byte_end":96228,"line_start":40,"line_end":40,"column_start":5,"column_end":14},"name":"HatAssign","qualname":"::token::Token::HatAssign","value":"Token::HatAssign","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":887},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96234,"byte_end":96243,"line_start":41,"line_end":41,"column_start":5,"column_end":14},"name":"AndAssign","qualname":"::token::Token::AndAssign","value":"Token::AndAssign","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":889},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96249,"byte_end":96257,"line_start":42,"line_end":42,"column_start":5,"column_end":13},"name":"OrAssign","qualname":"::token::Token::OrAssign","value":"Token::OrAssign","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":891},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96279,"byte_end":96284,"line_start":45,"line_end":45,"column_start":5,"column_end":10},"name":"Comma","qualname":"::token::Token::Comma","value":"Token::Comma","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":893},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96290,"byte_end":96299,"line_start":46,"line_end":46,"column_start":5,"column_end":14},"name":"Semicolon","qualname":"::token::Token::Semicolon","value":"Token::Semicolon","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":895},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96345,"byte_end":96355,"line_start":49,"line_end":49,"column_start":5,"column_end":15},"name":"Identifier","qualname":"::token::Token::Identifier","value":"Token::Identifier(String)","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":898},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96369,"byte_end":96374,"line_start":50,"line_end":50,"column_start":5,"column_end":10},"name":"Float","qualname":"::token::Token::Float","value":"Token::Float(FloatType)","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":901},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96391,"byte_end":96394,"line_start":51,"line_end":51,"column_start":5,"column_end":8},"name":"Int","qualname":"::token::Token::Int","value":"Token::Int(IntType)","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":904},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96409,"byte_end":96416,"line_start":52,"line_end":52,"column_start":5,"column_end":12},"name":"Boolean","qualname":"::token::Token::Boolean","value":"Token::Boolean(bool)","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":907},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96428,"byte_end":96434,"line_start":53,"line_end":53,"column_start":5,"column_end":11},"name":"String","qualname":"::token::Token::String","value":"Token::String(String)","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":838},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":95875,"byte_end":95880,"line_start":9,"line_end":9,"column_start":10,"column_end":15},"name":"Token","qualname":"::token::Token","value":"pub enum Token {\n    Plus,\n    Minus,\n    Star,\n    Slash,\n    Percent,\n    Hat,\n    Eq,\n    Neq,\n    Gt,\n    Lt,\n    Geq,\n    Leq,\n    And,\n    Or,\n    Not,\n    LBrace,\n    RBrace,\n    Assign,\n    PlusAssign,\n    MinusAssign,\n    StarAssign,\n    SlashAssign,\n    PercentAssign,\n    HatAssign,\n    AndAssign,\n    OrAssign,\n    Comma,\n    Semicolon,\n    Identifier(String),\n    Float(FloatType),\n    Int(IntType),\n    Boolean(bool),\n    String(String),\n}","parent":null,"children":[{"krate":0,"index":839},{"krate":0,"index":841},{"krate":0,"index":843},{"krate":0,"index":845},{"krate":0,"index":847},{"krate":0,"index":849},{"krate":0,"index":851},{"krate":0,"index":853},{"krate":0,"index":855},{"krate":0,"index":857},{"krate":0,"index":859},{"krate":0,"index":861},{"krate":0,"index":863},{"krate":0,"index":865},{"krate":0,"index":867},{"krate":0,"index":869},{"krate":0,"index":871},{"krate":0,"index":873},{"krate":0,"index":875},{"krate":0,"index":877},{"krate":0,"index":879},{"krate":0,"index":881},{"krate":0,"index":883},{"krate":0,"index":885},{"krate":0,"index":887},{"krate":0,"index":889},{"krate":0,"index":891},{"krate":0,"index":893},{"krate":0,"index":895},{"krate":0,"index":898},{"krate":0,"index":901},{"krate":0,"index":904},{"krate":0,"index":907}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":919},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96670,"byte_end":96675,"line_start":60,"line_end":60,"column_start":5,"column_end":10},"name":"Token","qualname":"::token::PartialToken::Token","value":"PartialToken::Token(Token)","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":" A partial token that unambiguously maps to a single token.\n","sig":null,"attributes":[{"value":"/ A partial token that unambiguously maps to a single token.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96603,"byte_end":96665,"line_start":59,"line_end":59,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":922},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96731,"byte_end":96738,"line_start":62,"line_end":62,"column_start":5,"column_end":12},"name":"Literal","qualname":"::token::PartialToken::Literal","value":"PartialToken::Literal(String)","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":" A partial token that is a literal.\n","sig":null,"attributes":[{"value":"/ A partial token that is a literal.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96688,"byte_end":96726,"line_start":61,"line_end":61,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":925},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96782,"byte_end":96786,"line_start":64,"line_end":64,"column_start":5,"column_end":9},"name":"Plus","qualname":"::token::PartialToken::Plus","value":"PartialToken::Plus","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":" A plus character '+'.\n","sig":null,"attributes":[{"value":"/ A plus character '+'.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96752,"byte_end":96777,"line_start":63,"line_end":63,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":927},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96823,"byte_end":96828,"line_start":66,"line_end":66,"column_start":5,"column_end":10},"name":"Minus","qualname":"::token::PartialToken::Minus","value":"PartialToken::Minus","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":" A minus character '-'.\n","sig":null,"attributes":[{"value":"/ A minus character '-'.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96792,"byte_end":96818,"line_start":65,"line_end":65,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":929},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96864,"byte_end":96868,"line_start":68,"line_end":68,"column_start":5,"column_end":9},"name":"Star","qualname":"::token::PartialToken::Star","value":"PartialToken::Star","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":" A star character '*'.\n","sig":null,"attributes":[{"value":"/ A star character '*'.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96834,"byte_end":96859,"line_start":67,"line_end":67,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":931},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96905,"byte_end":96910,"line_start":70,"line_end":70,"column_start":5,"column_end":10},"name":"Slash","qualname":"::token::PartialToken::Slash","value":"PartialToken::Slash","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":" A slash character '/'.\n","sig":null,"attributes":[{"value":"/ A slash character '/'.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96874,"byte_end":96900,"line_start":69,"line_end":69,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":933},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96949,"byte_end":96956,"line_start":72,"line_end":72,"column_start":5,"column_end":12},"name":"Percent","qualname":"::token::PartialToken::Percent","value":"PartialToken::Percent","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":" A percent character '%'.\n","sig":null,"attributes":[{"value":"/ A percent character '%'.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96916,"byte_end":96944,"line_start":71,"line_end":71,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":935},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96991,"byte_end":96994,"line_start":74,"line_end":74,"column_start":5,"column_end":8},"name":"Hat","qualname":"::token::PartialToken::Hat","value":"PartialToken::Hat","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":" A hat character '^'.\n","sig":null,"attributes":[{"value":"/ A hat character '^'.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96962,"byte_end":96986,"line_start":73,"line_end":73,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":937},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":97042,"byte_end":97052,"line_start":76,"line_end":76,"column_start":5,"column_end":15},"name":"Whitespace","qualname":"::token::PartialToken::Whitespace","value":"PartialToken::Whitespace","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":" A whitespace character, e.g. ' '.\n","sig":null,"attributes":[{"value":"/ A whitespace character, e.g. ' '.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":97000,"byte_end":97037,"line_start":75,"line_end":75,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":939},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":97093,"byte_end":97095,"line_start":78,"line_end":78,"column_start":5,"column_end":7},"name":"Eq","qualname":"::token::PartialToken::Eq","value":"PartialToken::Eq","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":" An equal-to character '='.\n","sig":null,"attributes":[{"value":"/ An equal-to character '='.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":97058,"byte_end":97088,"line_start":77,"line_end":77,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":941},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":97144,"byte_end":97159,"line_start":80,"line_end":80,"column_start":5,"column_end":20},"name":"ExclamationMark","qualname":"::token::PartialToken::ExclamationMark","value":"PartialToken::ExclamationMark","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":" An exclamation mark character '!'.\n","sig":null,"attributes":[{"value":"/ An exclamation mark character '!'.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":97101,"byte_end":97139,"line_start":79,"line_end":79,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":943},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":97203,"byte_end":97205,"line_start":82,"line_end":82,"column_start":5,"column_end":7},"name":"Gt","qualname":"::token::PartialToken::Gt","value":"PartialToken::Gt","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":" A greater-than character '>'.\n","sig":null,"attributes":[{"value":"/ A greater-than character '>'.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":97165,"byte_end":97198,"line_start":81,"line_end":81,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":945},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":97247,"byte_end":97249,"line_start":84,"line_end":84,"column_start":5,"column_end":7},"name":"Lt","qualname":"::token::PartialToken::Lt","value":"PartialToken::Lt","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":" A lower-than character '<'.\n","sig":null,"attributes":[{"value":"/ A lower-than character '<'.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":97211,"byte_end":97242,"line_start":83,"line_end":83,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":947},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":97291,"byte_end":97300,"line_start":86,"line_end":86,"column_start":5,"column_end":14},"name":"Ampersand","qualname":"::token::PartialToken::Ampersand","value":"PartialToken::Ampersand","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":" An ampersand character '&'.\n","sig":null,"attributes":[{"value":"/ An ampersand character '&'.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":97255,"byte_end":97286,"line_start":85,"line_end":85,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":949},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":97344,"byte_end":97355,"line_start":88,"line_end":88,"column_start":5,"column_end":16},"name":"VerticalBar","qualname":"::token::PartialToken::VerticalBar","value":"PartialToken::VerticalBar","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":" A vertical bar character '|'.\n","sig":null,"attributes":[{"value":"/ A vertical bar character '|'.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":97306,"byte_end":97339,"line_start":87,"line_end":87,"column_start":5,"column_end":38}}]},{"kind":"Enum","id":{"krate":0,"index":918},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96584,"byte_end":96596,"line_start":58,"line_end":58,"column_start":10,"column_end":22},"name":"PartialToken","qualname":"::token::PartialToken","value":"pub enum PartialToken {\n    Token(Token),\n    Literal(String),\n    Plus,\n    Minus,\n    Star,\n    Slash,\n    Percent,\n    Hat,\n    Whitespace,\n    Eq,\n    ExclamationMark,\n    Gt,\n    Lt,\n    Ampersand,\n    VerticalBar,\n}","parent":null,"children":[{"krate":0,"index":919},{"krate":0,"index":922},{"krate":0,"index":925},{"krate":0,"index":927},{"krate":0,"index":929},{"krate":0,"index":931},{"krate":0,"index":933},{"krate":0,"index":935},{"krate":0,"index":937},{"krate":0,"index":939},{"krate":0,"index":941},{"krate":0,"index":943},{"krate":0,"index":945},{"krate":0,"index":947},{"krate":0,"index":949}],"decl_id":null,"docs":" A partial token is an input character whose meaning depends on the characters around it.\n","sig":null,"attributes":[{"value":"/ A partial token is an input character whose meaning depends on the characters around it.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":96447,"byte_end":96539,"line_start":56,"line_end":56,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\iter.rs","byte_start":144616,"byte_end":144620,"line_start":45,"line_end":45,"column_start":12,"column_end":16},"name":"iter","qualname":"<Node>::iter","value":"pub fn iter(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all nodes in this tree.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over all nodes in this tree.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\iter.rs","byte_start":144552,"byte_end":144604,"line_start":44,"line_end":44,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":959},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":114353,"byte_end":114357,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"Node","qualname":"::tree::Node","value":"Node {  }","parent":null,"children":[{"krate":0,"index":960},{"krate":0,"index":961}],"decl_id":null,"docs":" A node in the operator tree.\n The operator tree is created by the crate-level `build_operator_tree` method.\n It can be evaluated for a given context with the `Node::eval` method.","sig":null,"attributes":[{"value":"/ A node in the operator tree.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":113584,"byte_end":113616,"line_start":19,"line_end":19,"column_start":1,"column_end":33}},{"value":"/ The operator tree is created by the crate-level `build_operator_tree` method.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":113617,"byte_end":113698,"line_start":20,"line_end":20,"column_start":1,"column_end":82}},{"value":"/ It can be evaluated for a given context with the `Node::eval` method.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":113699,"byte_end":113772,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":113773,"byte_end":113776,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The advantage of constructing the operator tree separately from the actual evaluation is that it can be evaluated arbitrarily often with different contexts.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":113777,"byte_end":113937,"line_start":23,"line_end":23,"column_start":1,"column_end":161}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":113938,"byte_end":113941,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":113942,"byte_end":113956,"line_start":25,"line_end":25,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":113957,"byte_end":113960,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":113961,"byte_end":113972,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":113973,"byte_end":113993,"line_start":28,"line_end":28,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":113994,"byte_end":113997,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let mut context = HashMapContext::new();","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":113998,"byte_end":114042,"line_start":30,"line_end":30,"column_start":1,"column_end":45}},{"value":"/ context.set_value(\"alpha\".into(), 2.into()).unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":114043,"byte_end":114133,"line_start":31,"line_end":31,"column_start":1,"column_end":91}},{"value":"/ let node = build_operator_tree(\"1 + alpha\").unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":114134,"byte_end":114224,"line_start":32,"line_end":32,"column_start":1,"column_end":91}},{"value":"/ assert_eq!(node.eval_with_context(&context), Ok(Value::from(3)));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":114225,"byte_end":114294,"line_start":33,"line_end":33,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":114295,"byte_end":114302,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":114303,"byte_end":114306,"line_start":35,"line_end":35,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":115232,"byte_end":115248,"line_start":70,"line_end":70,"column_start":12,"column_end":28},"name":"iter_identifiers","qualname":"<Node>::iter_identifiers","value":"pub fn iter_identifiers(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all identifiers in this expression.\n Each occurrence of an identifier is returned separately.","sig":null,"attributes":[{"value":"/ Returns an iterator over all identifiers in this expression.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":114631,"byte_end":114695,"line_start":54,"line_end":54,"column_start":5,"column_end":69}},{"value":"/ Each occurrence of an identifier is returned separately.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":114700,"byte_end":114760,"line_start":55,"line_end":55,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":114765,"byte_end":114768,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":114773,"byte_end":114787,"line_start":57,"line_end":57,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":114792,"byte_end":114795,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":114800,"byte_end":114811,"line_start":59,"line_end":59,"column_start":5,"column_end":16}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":114816,"byte_end":114836,"line_start":60,"line_end":60,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":114841,"byte_end":114844,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ let tree = build_operator_tree(\"a + b + c * f()\").unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":114849,"byte_end":114945,"line_start":62,"line_end":62,"column_start":5,"column_end":101}},{"value":"/ let mut iter = tree.iter_identifiers();","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":114950,"byte_end":114993,"line_start":63,"line_end":63,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(iter.next(), Some(\"a\"));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":114998,"byte_end":115037,"line_start":64,"line_end":64,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(iter.next(), Some(\"b\"));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":115042,"byte_end":115081,"line_start":65,"line_end":65,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(iter.next(), Some(\"c\"));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":115086,"byte_end":115125,"line_start":66,"line_end":66,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(iter.next(), Some(\"f\"));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":115130,"byte_end":115169,"line_start":67,"line_end":67,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":115174,"byte_end":115208,"line_start":68,"line_end":68,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":115213,"byte_end":115220,"line_start":69,"line_end":69,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":116119,"byte_end":116144,"line_start":93,"line_end":93,"column_start":12,"column_end":37},"name":"iter_variable_identifiers","qualname":"<Node>::iter_variable_identifiers","value":"pub fn iter_variable_identifiers(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all variable identifiers in this expression.\n Each occurrence of a variable identifier is returned separately.","sig":null,"attributes":[{"value":"/ Returns an iterator over all variable identifiers in this expression.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":115539,"byte_end":115612,"line_start":78,"line_end":78,"column_start":5,"column_end":78}},{"value":"/ Each occurrence of a variable identifier is returned separately.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":115617,"byte_end":115685,"line_start":79,"line_end":79,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":115690,"byte_end":115693,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":115698,"byte_end":115712,"line_start":81,"line_end":81,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":115717,"byte_end":115720,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":115725,"byte_end":115736,"line_start":83,"line_end":83,"column_start":5,"column_end":16}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":115741,"byte_end":115761,"line_start":84,"line_end":84,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":115766,"byte_end":115769,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ let tree = build_operator_tree(\"a + f(b + c)\").unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":115774,"byte_end":115867,"line_start":86,"line_end":86,"column_start":5,"column_end":98}},{"value":"/ let mut iter = tree.iter_variable_identifiers();","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":115872,"byte_end":115924,"line_start":87,"line_end":87,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(iter.next(), Some(\"a\"));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":115929,"byte_end":115968,"line_start":88,"line_end":88,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(iter.next(), Some(\"b\"));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":115973,"byte_end":116012,"line_start":89,"line_end":89,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(iter.next(), Some(\"c\"));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":116017,"byte_end":116056,"line_start":90,"line_end":90,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":116061,"byte_end":116095,"line_start":91,"line_end":91,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":116100,"byte_end":116107,"line_start":92,"line_end":92,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":116869,"byte_end":116894,"line_start":113,"line_end":113,"column_start":12,"column_end":37},"name":"iter_function_identifiers","qualname":"<Node>::iter_function_identifiers","value":"pub fn iter_function_identifiers(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all function identifiers in this expression.\n Each occurrence of a function identifier is returned separately.","sig":null,"attributes":[{"value":"/ Returns an iterator over all function identifiers in this expression.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":116377,"byte_end":116450,"line_start":100,"line_end":100,"column_start":5,"column_end":78}},{"value":"/ Each occurrence of a function identifier is returned separately.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":116455,"byte_end":116523,"line_start":101,"line_end":101,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":116528,"byte_end":116531,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":116536,"byte_end":116550,"line_start":103,"line_end":103,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":116555,"byte_end":116558,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":116563,"byte_end":116574,"line_start":105,"line_end":105,"column_start":5,"column_end":16}},{"value":"/ use evalexpr::*;","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":116579,"byte_end":116599,"line_start":106,"line_end":106,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":116604,"byte_end":116607,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ let tree = build_operator_tree(\"a + f(b + c)\").unwrap(); // Do proper error handling here","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":116612,"byte_end":116705,"line_start":108,"line_end":108,"column_start":5,"column_end":98}},{"value":"/ let mut iter = tree.iter_function_identifiers();","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":116710,"byte_end":116762,"line_start":109,"line_end":109,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(iter.next(), Some(\"f\"));","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":116767,"byte_end":116806,"line_start":110,"line_end":110,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":116811,"byte_end":116845,"line_start":111,"line_end":111,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":116850,"byte_end":116857,"line_start":112,"line_end":112,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":117291,"byte_end":117308,"line_start":123,"line_end":123,"column_start":12,"column_end":29},"name":"eval_with_context","qualname":"<Node>::eval_with_context","value":"pub fn eval_with_context<C: Context>(&Self, &C) -> EvalexprResult<Value>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node with the given context.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node with the given context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":117127,"byte_end":117202,"line_start":120,"line_end":120,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":117207,"byte_end":117210,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":117215,"byte_end":117279,"line_start":122,"line_end":122,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":117753,"byte_end":117774,"line_start":134,"line_end":134,"column_start":12,"column_end":33},"name":"eval_with_context_mut","qualname":"<Node>::eval_with_context_mut","value":"pub fn eval_with_context_mut<C: ContextWithMutableVariables>(&Self, &mut C)\n-> EvalexprResult<Value>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node with the given mutable context.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node with the given mutable context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":117581,"byte_end":117664,"line_start":131,"line_end":131,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":117669,"byte_end":117672,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":117677,"byte_end":117741,"line_start":133,"line_end":133,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":118243,"byte_end":118247,"line_start":148,"line_end":148,"column_start":12,"column_end":16},"name":"eval","qualname":"<Node>::eval","value":"pub fn eval(&Self) -> EvalexprResult<Value>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":118102,"byte_end":118154,"line_start":145,"line_end":145,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":118159,"byte_end":118162,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":118167,"byte_end":118231,"line_start":147,"line_end":147,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":118537,"byte_end":118561,"line_start":155,"line_end":155,"column_start":12,"column_end":36},"name":"eval_string_with_context","qualname":"<Node>::eval_string_with_context","value":"pub fn eval_string_with_context<C: Context>(&Self, &C)\n-> EvalexprResult<String>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node into a string with an the given context.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node into a string with an the given context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":118356,"byte_end":118448,"line_start":152,"line_end":152,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":118453,"byte_end":118456,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":118461,"byte_end":118525,"line_start":154,"line_end":154,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":119031,"byte_end":119054,"line_start":166,"line_end":166,"column_start":12,"column_end":35},"name":"eval_float_with_context","qualname":"<Node>::eval_float_with_context","value":"pub fn eval_float_with_context<C: Context>(&Self, &C)\n-> EvalexprResult<FloatType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node into a float with an the given context.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node into a float with an the given context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":118851,"byte_end":118942,"line_start":163,"line_end":163,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":118947,"byte_end":118950,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":118955,"byte_end":119019,"line_start":165,"line_end":165,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":119526,"byte_end":119547,"line_start":177,"line_end":177,"column_start":12,"column_end":33},"name":"eval_int_with_context","qualname":"<Node>::eval_int_with_context","value":"pub fn eval_int_with_context<C: Context>(&Self, &C) -> EvalexprResult<IntType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node into an integer with an the given context.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node into an integer with an the given context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":119343,"byte_end":119437,"line_start":174,"line_end":174,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":119442,"byte_end":119445,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":119450,"byte_end":119514,"line_start":176,"line_end":176,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":120100,"byte_end":120124,"line_start":189,"line_end":189,"column_start":12,"column_end":36},"name":"eval_number_with_context","qualname":"<Node>::eval_number_with_context","value":"pub fn eval_number_with_context<C: Context>(&Self, &C)\n-> EvalexprResult<FloatType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node into a float with an the given context.\n If the result of the expression is an integer, it is silently converted into a float.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node into a float with an the given context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":119826,"byte_end":119917,"line_start":185,"line_end":185,"column_start":5,"column_end":96}},{"value":"/ If the result of the expression is an integer, it is silently converted into a float.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":119922,"byte_end":120011,"line_start":186,"line_end":186,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":120016,"byte_end":120019,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":120024,"byte_end":120088,"line_start":188,"line_end":188,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":120653,"byte_end":120678,"line_start":201,"line_end":201,"column_start":12,"column_end":37},"name":"eval_boolean_with_context","qualname":"<Node>::eval_boolean_with_context","value":"pub fn eval_boolean_with_context<C: Context>(&Self, &C)\n-> EvalexprResult<bool>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node into a boolean with an the given context.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node into a boolean with an the given context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":120471,"byte_end":120564,"line_start":198,"line_end":198,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":120569,"byte_end":120572,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":120577,"byte_end":120641,"line_start":200,"line_end":200,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":121150,"byte_end":121173,"line_start":212,"line_end":212,"column_start":12,"column_end":35},"name":"eval_tuple_with_context","qualname":"<Node>::eval_tuple_with_context","value":"pub fn eval_tuple_with_context<C: Context>(&Self, &C)\n-> EvalexprResult<TupleType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node into a tuple with an the given context.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node into a tuple with an the given context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":120970,"byte_end":121061,"line_start":209,"line_end":209,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":121066,"byte_end":121069,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":121074,"byte_end":121138,"line_start":211,"line_end":211,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":121649,"byte_end":121672,"line_start":223,"line_end":223,"column_start":12,"column_end":35},"name":"eval_empty_with_context","qualname":"<Node>::eval_empty_with_context","value":"pub fn eval_empty_with_context<C: Context>(&Self, &C)\n-> EvalexprResult<EmptyType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node into an empty value with an the given context.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node into an empty value with an the given context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":121462,"byte_end":121560,"line_start":220,"line_end":220,"column_start":5,"column_end":103}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":121565,"byte_end":121568,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":121573,"byte_end":121637,"line_start":222,"line_end":222,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":122149,"byte_end":122177,"line_start":234,"line_end":234,"column_start":12,"column_end":40},"name":"eval_string_with_context_mut","qualname":"<Node>::eval_string_with_context_mut","value":"pub fn eval_string_with_context_mut<C: ContextWithMutableVariables>(&Self,\n&mut C) -> EvalexprResult<String>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node into a string with an the given mutable context.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node into a string with an the given mutable context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":121960,"byte_end":122060,"line_start":231,"line_end":231,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":122065,"byte_end":122068,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":122073,"byte_end":122137,"line_start":233,"line_end":233,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":122706,"byte_end":122733,"line_start":248,"line_end":248,"column_start":12,"column_end":39},"name":"eval_float_with_context_mut","qualname":"<Node>::eval_float_with_context_mut","value":"pub fn eval_float_with_context_mut<C: ContextWithMutableVariables>(&Self,\n&mut C) -> EvalexprResult<FloatType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node into a float with an the given mutable context.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node into a float with an the given mutable context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":122518,"byte_end":122617,"line_start":245,"line_end":245,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":122622,"byte_end":122625,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":122630,"byte_end":122694,"line_start":247,"line_end":247,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":123264,"byte_end":123289,"line_start":262,"line_end":262,"column_start":12,"column_end":37},"name":"eval_int_with_context_mut","qualname":"<Node>::eval_int_with_context_mut","value":"pub fn eval_int_with_context_mut<C: ContextWithMutableVariables>(&Self,\n&mut C) -> EvalexprResult<IntType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node into an integer with an the given mutable context.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node into an integer with an the given mutable context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":123073,"byte_end":123175,"line_start":259,"line_end":259,"column_start":5,"column_end":107}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":123180,"byte_end":123183,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":123188,"byte_end":123252,"line_start":261,"line_end":261,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":123901,"byte_end":123929,"line_start":277,"line_end":277,"column_start":12,"column_end":40},"name":"eval_number_with_context_mut","qualname":"<Node>::eval_number_with_context_mut","value":"pub fn eval_number_with_context_mut<C: ContextWithMutableVariables>(&Self,\n&mut C) -> EvalexprResult<FloatType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node into a float with an the given mutable context.\n If the result of the expression is an integer, it is silently converted into a float.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node into a float with an the given mutable context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":123619,"byte_end":123718,"line_start":273,"line_end":273,"column_start":5,"column_end":104}},{"value":"/ If the result of the expression is an integer, it is silently converted into a float.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":123723,"byte_end":123812,"line_start":274,"line_end":274,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":123817,"byte_end":123820,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":123825,"byte_end":123889,"line_start":276,"line_end":276,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":124517,"byte_end":124546,"line_start":292,"line_end":292,"column_start":12,"column_end":41},"name":"eval_boolean_with_context_mut","qualname":"<Node>::eval_boolean_with_context_mut","value":"pub fn eval_boolean_with_context_mut<C: ContextWithMutableVariables>(&Self,\n&mut C) -> EvalexprResult<bool>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node into a boolean with an the given mutable context.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node into a boolean with an the given mutable context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":124327,"byte_end":124428,"line_start":289,"line_end":289,"column_start":5,"column_end":106}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":124433,"byte_end":124436,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":124441,"byte_end":124505,"line_start":291,"line_end":291,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":125077,"byte_end":125104,"line_start":306,"line_end":306,"column_start":12,"column_end":39},"name":"eval_tuple_with_context_mut","qualname":"<Node>::eval_tuple_with_context_mut","value":"pub fn eval_tuple_with_context_mut<C: ContextWithMutableVariables>(&Self,\n&mut C) -> EvalexprResult<TupleType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node into a tuple with an the given mutable context.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node into a tuple with an the given mutable context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":124889,"byte_end":124988,"line_start":303,"line_end":303,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":124993,"byte_end":124996,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":125001,"byte_end":125065,"line_start":305,"line_end":305,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":125639,"byte_end":125666,"line_start":320,"line_end":320,"column_start":12,"column_end":39},"name":"eval_empty_with_context_mut","qualname":"<Node>::eval_empty_with_context_mut","value":"pub fn eval_empty_with_context_mut<C: ContextWithMutableVariables>(&Self,\n&mut C) -> EvalexprResult<EmptyType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node into an empty value with an the given mutable context.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node into an empty value with an the given mutable context.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":125444,"byte_end":125550,"line_start":317,"line_end":317,"column_start":5,"column_end":111}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":125555,"byte_end":125558,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":125563,"byte_end":125627,"line_start":319,"line_end":319,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":126160,"byte_end":126171,"line_start":334,"line_end":334,"column_start":12,"column_end":23},"name":"eval_string","qualname":"<Node>::eval_string","value":"pub fn eval_string(&Self) -> EvalexprResult<String>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node into a string.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node into a string.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":126005,"byte_end":126071,"line_start":331,"line_end":331,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":126076,"byte_end":126079,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":126084,"byte_end":126148,"line_start":333,"line_end":333,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":126442,"byte_end":126452,"line_start":341,"line_end":341,"column_start":12,"column_end":22},"name":"eval_float","qualname":"<Node>::eval_float","value":"pub fn eval_float(&Self) -> EvalexprResult<FloatType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node into a float.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node into a float.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":126288,"byte_end":126353,"line_start":338,"line_end":338,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":126358,"byte_end":126361,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":126366,"byte_end":126430,"line_start":340,"line_end":340,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":126728,"byte_end":126736,"line_start":348,"line_end":348,"column_start":12,"column_end":20},"name":"eval_int","qualname":"<Node>::eval_int","value":"pub fn eval_int(&Self) -> EvalexprResult<IntType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node into an integer.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node into an integer.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":126571,"byte_end":126639,"line_start":345,"line_end":345,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":126644,"byte_end":126647,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":126652,"byte_end":126716,"line_start":347,"line_end":347,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":127099,"byte_end":127110,"line_start":356,"line_end":356,"column_start":12,"column_end":23},"name":"eval_number","qualname":"<Node>::eval_number","value":"pub fn eval_number(&Self) -> EvalexprResult<FloatType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node into a float.\n If the result of the expression is an integer, it is silently converted into a float.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node into a float.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":126851,"byte_end":126916,"line_start":352,"line_end":352,"column_start":5,"column_end":70}},{"value":"/ If the result of the expression is an integer, it is silently converted into a float.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":126921,"byte_end":127010,"line_start":353,"line_end":353,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":127015,"byte_end":127018,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":127023,"byte_end":127087,"line_start":355,"line_end":355,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":127386,"byte_end":127398,"line_start":363,"line_end":363,"column_start":12,"column_end":24},"name":"eval_boolean","qualname":"<Node>::eval_boolean","value":"pub fn eval_boolean(&Self) -> EvalexprResult<bool>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node into a boolean.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node into a boolean.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":127230,"byte_end":127297,"line_start":360,"line_end":360,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":127302,"byte_end":127305,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":127310,"byte_end":127374,"line_start":362,"line_end":362,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":127668,"byte_end":127678,"line_start":370,"line_end":370,"column_start":12,"column_end":22},"name":"eval_tuple","qualname":"<Node>::eval_tuple","value":"pub fn eval_tuple(&Self) -> EvalexprResult<TupleType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node into a tuple.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node into a tuple.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":127514,"byte_end":127579,"line_start":367,"line_end":367,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":127584,"byte_end":127587,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":127592,"byte_end":127656,"line_start":369,"line_end":369,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":127958,"byte_end":127968,"line_start":377,"line_end":377,"column_start":12,"column_end":22},"name":"eval_empty","qualname":"<Node>::eval_empty","value":"pub fn eval_empty(&Self) -> EvalexprResult<EmptyType>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the operator tree rooted at this node into an empty value.","sig":null,"attributes":[{"value":"/ Evaluates the operator tree rooted at this node into an empty value.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":127797,"byte_end":127869,"line_start":374,"line_end":374,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":127874,"byte_end":127877,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ Fails, if one of the operators in the expression tree fails.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":127882,"byte_end":127946,"line_start":376,"line_end":376,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":128148,"byte_end":128156,"line_start":382,"line_end":382,"column_start":12,"column_end":20},"name":"children","qualname":"<Node>::children","value":"pub fn children(&Self) -> &[Node]","parent":null,"children":[],"decl_id":null,"docs":" Returns the children of this node as a slice.\n","sig":null,"attributes":[{"value":"/ Returns the children of this node as a slice.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":128087,"byte_end":128136,"line_start":381,"line_end":381,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":128274,"byte_end":128282,"line_start":387,"line_end":387,"column_start":12,"column_end":20},"name":"operator","qualname":"<Node>::operator","value":"pub fn operator(&Self) -> &Operator","parent":null,"children":[],"decl_id":null,"docs":" Returns the operator associated with this node.\n","sig":null,"attributes":[{"value":"/ Returns the operator associated with this node.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":128211,"byte_end":128262,"line_start":386,"line_end":386,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":128572,"byte_end":128584,"line_start":394,"line_end":394,"column_start":12,"column_end":24},"name":"children_mut","qualname":"<Node>::children_mut","value":"pub fn children_mut(&mut Self) -> &mut Vec<Node>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the vector containing the children of this node.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the vector containing the children of this node.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":128339,"byte_end":128422,"line_start":391,"line_end":391,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":128427,"byte_end":128430,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ WARNING: Writing to this might have unexpected results, as some operators require certain amounts and types of arguments.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":128435,"byte_end":128560,"line_start":393,"line_end":393,"column_start":5,"column_end":130}}]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":128880,"byte_end":128892,"line_start":401,"line_end":401,"column_start":12,"column_end":24},"name":"operator_mut","qualname":"<Node>::operator_mut","value":"pub fn operator_mut(&mut Self) -> &mut Operator","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the operator associated with this node.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the operator associated with this node.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":128654,"byte_end":128728,"line_start":398,"line_end":398,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":128733,"byte_end":128736,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ WARNING: Writing to this might have unexpected results, as some operators require different amounts and types of arguments.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":128741,"byte_end":128868,"line_start":400,"line_end":400,"column_start":5,"column_end":132}}]},{"kind":"TupleVariant","id":{"krate":0,"index":971},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\value_type.rs","byte_start":152362,"byte_end":152368,"line_start":7,"line_end":7,"column_start":5,"column_end":11},"name":"String","qualname":"::value::value_type::ValueType::String","value":"ValueType::String","parent":{"krate":0,"index":970},"children":[],"decl_id":null,"docs":" The `Value::String` type.\n","sig":null,"attributes":[{"value":"/ The `Value::String` type.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\value_type.rs","byte_start":152328,"byte_end":152357,"line_start":6,"line_end":6,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":973},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\value_type.rs","byte_start":152407,"byte_end":152412,"line_start":9,"line_end":9,"column_start":5,"column_end":10},"name":"Float","qualname":"::value::value_type::ValueType::Float","value":"ValueType::Float","parent":{"krate":0,"index":970},"children":[],"decl_id":null,"docs":" The `Value::Float` type.\n","sig":null,"attributes":[{"value":"/ The `Value::Float` type.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\value_type.rs","byte_start":152374,"byte_end":152402,"line_start":8,"line_end":8,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":975},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\value_type.rs","byte_start":152449,"byte_end":152452,"line_start":11,"line_end":11,"column_start":5,"column_end":8},"name":"Int","qualname":"::value::value_type::ValueType::Int","value":"ValueType::Int","parent":{"krate":0,"index":970},"children":[],"decl_id":null,"docs":" The `Value::Int` type.\n","sig":null,"attributes":[{"value":"/ The `Value::Int` type.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\value_type.rs","byte_start":152418,"byte_end":152444,"line_start":10,"line_end":10,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":977},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\value_type.rs","byte_start":152493,"byte_end":152500,"line_start":13,"line_end":13,"column_start":5,"column_end":12},"name":"Boolean","qualname":"::value::value_type::ValueType::Boolean","value":"ValueType::Boolean","parent":{"krate":0,"index":970},"children":[],"decl_id":null,"docs":" The `Value::Boolean` type.\n","sig":null,"attributes":[{"value":"/ The `Value::Boolean` type.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\value_type.rs","byte_start":152458,"byte_end":152488,"line_start":12,"line_end":12,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":979},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\value_type.rs","byte_start":152539,"byte_end":152544,"line_start":15,"line_end":15,"column_start":5,"column_end":10},"name":"Tuple","qualname":"::value::value_type::ValueType::Tuple","value":"ValueType::Tuple","parent":{"krate":0,"index":970},"children":[],"decl_id":null,"docs":" The `Value::Tuple` type.\n","sig":null,"attributes":[{"value":"/ The `Value::Tuple` type.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\value_type.rs","byte_start":152506,"byte_end":152534,"line_start":14,"line_end":14,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":981},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\value_type.rs","byte_start":152583,"byte_end":152588,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"name":"Empty","qualname":"::value::value_type::ValueType::Empty","value":"ValueType::Empty","parent":{"krate":0,"index":970},"children":[],"decl_id":null,"docs":" The `Value::Empty` type.\n","sig":null,"attributes":[{"value":"/ The `Value::Empty` type.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\value_type.rs","byte_start":152550,"byte_end":152578,"line_start":16,"line_end":16,"column_start":5,"column_end":33}}]},{"kind":"Enum","id":{"krate":0,"index":970},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\value_type.rs","byte_start":152312,"byte_end":152321,"line_start":5,"line_end":5,"column_start":10,"column_end":19},"name":"ValueType","qualname":"::value::value_type::ValueType","value":"pub enum ValueType { String, Float, Int, Boolean, Tuple, Empty, }","parent":null,"children":[{"krate":0,"index":971},{"krate":0,"index":973},{"krate":0,"index":975},{"krate":0,"index":977},{"krate":0,"index":979},{"krate":0,"index":981}],"decl_id":null,"docs":" The type of a `Value`.\n","sig":null,"attributes":[{"value":"/ The type of a `Value`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\value_type.rs","byte_start":152231,"byte_end":152257,"line_start":3,"line_end":3,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":598},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":144850,"byte_end":144857,"line_start":7,"line_end":7,"column_start":10,"column_end":17},"name":"IntType","qualname":"::value::IntType","value":"i64","parent":null,"children":[],"decl_id":null,"docs":" The type used to represent integers in `Value::Int`.\n","sig":null,"attributes":[{"value":"/ The type used to represent integers in `Value::Int`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":144784,"byte_end":144840,"line_start":6,"line_end":6,"column_start":1,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":599},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":144932,"byte_end":144941,"line_start":10,"line_end":10,"column_start":10,"column_end":19},"name":"FloatType","qualname":"::value::FloatType","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" The type used to represent floats in `Value::Float`.\n","sig":null,"attributes":[{"value":"/ The type used to represent floats in `Value::Float`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":144866,"byte_end":144922,"line_start":9,"line_end":9,"column_start":1,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":600},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145016,"byte_end":145025,"line_start":13,"line_end":13,"column_start":10,"column_end":19},"name":"TupleType","qualname":"::value::TupleType","value":"Vec<Value>","parent":null,"children":[],"decl_id":null,"docs":" The type used to represent tuples in `Value::Tuple`.\n","sig":null,"attributes":[{"value":"/ The type used to represent tuples in `Value::Tuple`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":144950,"byte_end":145006,"line_start":12,"line_end":12,"column_start":1,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":601},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145113,"byte_end":145122,"line_start":16,"line_end":16,"column_start":10,"column_end":19},"name":"EmptyType","qualname":"::value::EmptyType","value":"()","parent":null,"children":[],"decl_id":null,"docs":" The type used to represent empty values in `Value::Empty`.\n","sig":null,"attributes":[{"value":"/ The type used to represent empty values in `Value::Empty`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145041,"byte_end":145103,"line_start":15,"line_end":15,"column_start":1,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":602},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145192,"byte_end":145203,"line_start":19,"line_end":19,"column_start":11,"column_end":22},"name":"EMPTY_VALUE","qualname":"::value::EMPTY_VALUE","value":"()","parent":null,"children":[],"decl_id":null,"docs":" The value of the empty type to be used in rust.\n","sig":null,"attributes":[{"value":"/ The value of the empty type to be used in rust.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145130,"byte_end":145181,"line_start":18,"line_end":18,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":995},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145481,"byte_end":145487,"line_start":27,"line_end":27,"column_start":5,"column_end":11},"name":"String","qualname":"::value::Value::String","value":"Value::String(String)","parent":{"krate":0,"index":994},"children":[],"decl_id":null,"docs":" A string value.\n","sig":null,"attributes":[{"value":"/ A string value.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145457,"byte_end":145476,"line_start":26,"line_end":26,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":998},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145524,"byte_end":145529,"line_start":29,"line_end":29,"column_start":5,"column_end":10},"name":"Float","qualname":"::value::Value::Float","value":"Value::Float(FloatType)","parent":{"krate":0,"index":994},"children":[],"decl_id":null,"docs":" A float value.\n","sig":null,"attributes":[{"value":"/ A float value.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145501,"byte_end":145519,"line_start":28,"line_end":28,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1001},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145572,"byte_end":145575,"line_start":31,"line_end":31,"column_start":5,"column_end":8},"name":"Int","qualname":"::value::Value::Int","value":"Value::Int(IntType)","parent":{"krate":0,"index":994},"children":[],"decl_id":null,"docs":" An integer value.\n","sig":null,"attributes":[{"value":"/ An integer value.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145546,"byte_end":145567,"line_start":30,"line_end":30,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1004},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145615,"byte_end":145622,"line_start":33,"line_end":33,"column_start":5,"column_end":12},"name":"Boolean","qualname":"::value::Value::Boolean","value":"Value::Boolean(bool)","parent":{"krate":0,"index":994},"children":[],"decl_id":null,"docs":" A boolean value.\n","sig":null,"attributes":[{"value":"/ A boolean value.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145590,"byte_end":145610,"line_start":32,"line_end":32,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1007},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145657,"byte_end":145662,"line_start":35,"line_end":35,"column_start":5,"column_end":10},"name":"Tuple","qualname":"::value::Value::Tuple","value":"Value::Tuple(TupleType)","parent":{"krate":0,"index":994},"children":[],"decl_id":null,"docs":" A tuple value.\n","sig":null,"attributes":[{"value":"/ A tuple value.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145634,"byte_end":145652,"line_start":34,"line_end":34,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1010},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145703,"byte_end":145708,"line_start":37,"line_end":37,"column_start":5,"column_end":10},"name":"Empty","qualname":"::value::Value::Empty","value":"Value::Empty","parent":{"krate":0,"index":994},"children":[],"decl_id":null,"docs":" An empty value.\n","sig":null,"attributes":[{"value":"/ An empty value.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145679,"byte_end":145698,"line_start":36,"line_end":36,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":994},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145445,"byte_end":145450,"line_start":25,"line_end":25,"column_start":10,"column_end":15},"name":"Value","qualname":"::value::Value","value":"pub enum Value {\n    String(String),\n    Float(FloatType),\n    Int(IntType),\n    Boolean(bool),\n    Tuple(TupleType),\n    Empty,\n}","parent":null,"children":[{"krate":0,"index":995},{"krate":0,"index":998},{"krate":0,"index":1001},{"krate":0,"index":1004},{"krate":0,"index":1007},{"krate":0,"index":1010}],"decl_id":null,"docs":" The value type used by the parser.\n Values can be of different subtypes that are the variants of this enum.\n","sig":null,"attributes":[{"value":"/ The value type used by the parser.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145215,"byte_end":145253,"line_start":21,"line_end":21,"column_start":1,"column_end":39}},{"value":"/ Values can be of different subtypes that are the variants of this enum.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145254,"byte_end":145329,"line_start":22,"line_end":22,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145790,"byte_end":145799,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"name":"is_string","qualname":"<Value>::is_string","value":"pub fn is_string(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if `self` is a `Value::String`.\n","sig":null,"attributes":[{"value":"/ Returns true if `self` is a `Value::String`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145730,"byte_end":145778,"line_start":41,"line_end":41,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145925,"byte_end":145931,"line_start":46,"line_end":46,"column_start":12,"column_end":18},"name":"is_int","qualname":"<Value>::is_int","value":"pub fn is_int(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if `self` is a `Value::Int`.\n","sig":null,"attributes":[{"value":"/ Returns true if `self` is a `Value::Int`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145868,"byte_end":145913,"line_start":45,"line_end":45,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":146057,"byte_end":146065,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"is_float","qualname":"<Value>::is_float","value":"pub fn is_float(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if `self` is a `Value::Float`.\n","sig":null,"attributes":[{"value":"/ Returns true if `self` is a `Value::Float`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145998,"byte_end":146045,"line_start":50,"line_end":50,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":146209,"byte_end":146218,"line_start":56,"line_end":56,"column_start":12,"column_end":21},"name":"is_number","qualname":"<Value>::is_number","value":"pub fn is_number(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if `self` is a `Value::Int` or `Value::Float`.\n","sig":null,"attributes":[{"value":"/ Returns true if `self` is a `Value::Int` or `Value::Float`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":146134,"byte_end":146197,"line_start":55,"line_end":55,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":146364,"byte_end":146374,"line_start":61,"line_end":61,"column_start":12,"column_end":22},"name":"is_boolean","qualname":"<Value>::is_boolean","value":"pub fn is_boolean(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if `self` is a `Value::Boolean`.\n","sig":null,"attributes":[{"value":"/ Returns true if `self` is a `Value::Boolean`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":146303,"byte_end":146352,"line_start":60,"line_end":60,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":146504,"byte_end":146512,"line_start":66,"line_end":66,"column_start":12,"column_end":20},"name":"is_tuple","qualname":"<Value>::is_tuple","value":"pub fn is_tuple(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if `self` is a `Value::Tuple`.\n","sig":null,"attributes":[{"value":"/ Returns true if `self` is a `Value::Tuple`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":146445,"byte_end":146492,"line_start":65,"line_end":65,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":146640,"byte_end":146648,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Value>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if `self` is a `Value::Empty`.\n","sig":null,"attributes":[{"value":"/ Returns true if `self` is a `Value::Empty`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":146581,"byte_end":146628,"line_start":70,"line_end":70,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":146829,"byte_end":146838,"line_start":76,"line_end":76,"column_start":12,"column_end":21},"name":"as_string","qualname":"<Value>::as_string","value":"pub fn as_string(&Self) -> EvalexprResult<String>","parent":null,"children":[],"decl_id":null,"docs":" Clones the value stored in `self` as `String`, or returns `Err` if `self` is not a `Value::String`.\n","sig":null,"attributes":[{"value":"/ Clones the value stored in `self` as `String`, or returns `Err` if `self` is not a `Value::String`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":146714,"byte_end":146817,"line_start":75,"line_end":75,"column_start":5,"column_end":108}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":147159,"byte_end":147165,"line_start":84,"line_end":84,"column_start":12,"column_end":18},"name":"as_int","qualname":"<Value>::as_int","value":"pub fn as_int(&Self) -> EvalexprResult<IntType>","parent":null,"children":[],"decl_id":null,"docs":" Clones the value stored in `self` as `IntType`, or returns `Err` if `self` is not a `Value::Int`.\n","sig":null,"attributes":[{"value":"/ Clones the value stored in `self` as `IntType`, or returns `Err` if `self` is not a `Value::Int`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":147046,"byte_end":147147,"line_start":83,"line_end":83,"column_start":5,"column_end":106}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":147469,"byte_end":147477,"line_start":92,"line_end":92,"column_start":12,"column_end":20},"name":"as_float","qualname":"<Value>::as_float","value":"pub fn as_float(&Self) -> EvalexprResult<FloatType>","parent":null,"children":[],"decl_id":null,"docs":" Clones the value stored in  `self` as `FloatType`, or returns `Err` if `self` is not a `Value::Float`.\n","sig":null,"attributes":[{"value":"/ Clones the value stored in  `self` as `FloatType`, or returns `Err` if `self` is not a `Value::Float`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":147351,"byte_end":147457,"line_start":91,"line_end":91,"column_start":5,"column_end":111}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":147906,"byte_end":147915,"line_start":101,"line_end":101,"column_start":12,"column_end":21},"name":"as_number","qualname":"<Value>::as_number","value":"pub fn as_number(&Self) -> EvalexprResult<FloatType>","parent":null,"children":[],"decl_id":null,"docs":" Clones the value stored in  `self` as `FloatType`, or returns `Err` if `self` is not a `Value::Float` or `Value::Int`.\n Note that this method silently converts `IntType` to `FloatType`, if `self` is a `Value::Int`.\n","sig":null,"attributes":[{"value":"/ Clones the value stored in  `self` as `FloatType`, or returns `Err` if `self` is not a `Value::Float` or `Value::Int`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":147669,"byte_end":147791,"line_start":99,"line_end":99,"column_start":5,"column_end":127}},{"value":"/ Note that this method silently converts `IntType` to `FloatType`, if `self` is a `Value::Int`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":147796,"byte_end":147894,"line_start":100,"line_end":100,"column_start":5,"column_end":103}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":148273,"byte_end":148283,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"as_boolean","qualname":"<Value>::as_boolean","value":"pub fn as_boolean(&Self) -> EvalexprResult<bool>","parent":null,"children":[],"decl_id":null,"docs":" Clones the value stored in  `self` as `bool`, or returns `Err` if `self` is not a `Value::Boolean`.\n","sig":null,"attributes":[{"value":"/ Clones the value stored in  `self` as `bool`, or returns `Err` if `self` is not a `Value::Boolean`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":148158,"byte_end":148261,"line_start":109,"line_end":109,"column_start":5,"column_end":108}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":148603,"byte_end":148611,"line_start":118,"line_end":118,"column_start":12,"column_end":20},"name":"as_tuple","qualname":"<Value>::as_tuple","value":"pub fn as_tuple(&Self) -> EvalexprResult<TupleType>","parent":null,"children":[],"decl_id":null,"docs":" Clones the value stored in `self` as `TupleType`, or returns `Err` if `self` is not a `Value::Tuple`.\n","sig":null,"attributes":[{"value":"/ Clones the value stored in `self` as `TupleType`, or returns `Err` if `self` is not a `Value::Tuple`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":148486,"byte_end":148591,"line_start":117,"line_end":117,"column_start":5,"column_end":110}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":148957,"byte_end":148975,"line_start":126,"line_end":126,"column_start":12,"column_end":30},"name":"as_fixed_len_tuple","qualname":"<Value>::as_fixed_len_tuple","value":"pub fn as_fixed_len_tuple(&Self, usize) -> EvalexprResult<TupleType>","parent":null,"children":[],"decl_id":null,"docs":" Clones the value stored in `self` as `TupleType` or returns `Err` if `self` is not a `Value::Tuple` of the required length.\n","sig":null,"attributes":[{"value":"/ Clones the value stored in `self` as `TupleType` or returns `Err` if `self` is not a `Value::Tuple` of the required length.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":148818,"byte_end":148945,"line_start":125,"line_end":125,"column_start":5,"column_end":132}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":149477,"byte_end":149485,"line_start":140,"line_end":140,"column_start":12,"column_end":20},"name":"as_empty","qualname":"<Value>::as_empty","value":"pub fn as_empty(&Self) -> EvalexprResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Returns `()`, or returns`Err` if `self` is not a `Value::Tuple`.\n","sig":null,"attributes":[{"value":"/ Returns `()`, or returns`Err` if `self` is not a `Value::Tuple`.","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":149397,"byte_end":149465,"line_start":139,"line_end":139,"column_start":5,"column_end":73}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":29124,"byte_end":29136,"line_start":56,"line_end":56,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":93},{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":30043,"byte_end":30057,"line_start":81,"line_end":81,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":30196,"byte_end":30210,"line_start":88,"line_end":88,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":30700,"byte_end":30714,"line_start":104,"line_end":104,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":31361,"byte_end":31375,"line_start":121,"line_end":121,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\display.rs","byte_start":47699,"byte_end":47712,"line_start":5,"line_end":5,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":40843,"byte_end":40856,"line_start":210,"line_end":210,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":46318,"byte_end":46331,"line_start":365,"line_end":365,"column_start":28,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":53293,"byte_end":53294,"line_start":16,"line_end":16,"column_start":24,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":53994,"byte_end":54002,"line_start":45,"line_end":45,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":54123,"byte_end":54131,"line_start":53,"line_end":53,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":54600,"byte_end":54608,"line_start":73,"line_end":73,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":54939,"byte_end":54947,"line_start":83,"line_end":83,"column_start":24,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\display.rs","byte_start":94292,"byte_end":94300,"line_start":7,"line_end":7,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":77343,"byte_end":77351,"line_start":90,"line_end":90,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":362},{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":369},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\display.rs","byte_start":110775,"byte_end":110780,"line_start":5,"line_end":5,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\display.rs","byte_start":112425,"byte_end":112437,"line_start":56,"line_end":56,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":98370,"byte_end":98375,"line_start":124,"line_end":124,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\display.rs","byte_start":143317,"byte_end":143321,"line_start":4,"line_end":4,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\iter.rs","byte_start":143698,"byte_end":143706,"line_start":9,"line_end":9,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\iter.rs","byte_start":143857,"byte_end":143865,"line_start":17,"line_end":17,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":497},{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\iter.rs","byte_start":144541,"byte_end":144545,"line_start":43,"line_end":43,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":114417,"byte_end":114421,"line_start":42,"line_end":42,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":508},{"krate":0,"index":511},{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":521},{"krate":0,"index":523},{"krate":0,"index":525},{"krate":0,"index":527},{"krate":0,"index":529},{"krate":0,"index":531},{"krate":0,"index":533},{"krate":0,"index":535},{"krate":0,"index":537},{"krate":0,"index":539},{"krate":0,"index":541},{"krate":0,"index":543},{"krate":0,"index":545},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\display.rs","byte_start":151412,"byte_end":151417,"line_start":5,"line_end":5,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\value_type.rs","byte_start":152615,"byte_end":152624,"line_start":20,"line_end":20,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\value_type.rs","byte_start":153024,"byte_end":153033,"line_start":33,"line_end":33,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\value_type.rs","byte_start":153149,"byte_end":153158,"line_start":39,"line_end":39,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":597}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145718,"byte_end":145723,"line_start":40,"line_end":40,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":149687,"byte_end":149692,"line_start":148,"line_end":148,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":149792,"byte_end":149797,"line_start":154,"line_end":154,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":149912,"byte_end":149917,"line_start":160,"line_end":160,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":150020,"byte_end":150025,"line_start":166,"line_end":166,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":150117,"byte_end":150122,"line_start":172,"line_end":172,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":150228,"byte_end":150233,"line_start":178,"line_end":178,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":150334,"byte_end":150348,"line_start":184,"line_end":184,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":150439,"byte_end":150444,"line_start":190,"line_end":190,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src/lib.rs","byte_start":26609,"byte_end":26614,"line_start":545,"line_end":545,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":105}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":28010,"byte_end":28017,"line_start":28,"line_end":28,"column_start":40,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":85},"to":{"krate":0,"index":88}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":28335,"byte_end":28342,"line_start":36,"line_end":36,"column_start":40,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":85},"to":{"krate":0,"index":90}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":29124,"byte_end":29136,"line_start":56,"line_end":56,"column_start":18,"column_end":30},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":635},"to":{"krate":0,"index":85}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":30043,"byte_end":30057,"line_start":81,"line_end":81,"column_start":6,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":641},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":30196,"byte_end":30210,"line_start":88,"line_end":88,"column_start":18,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":641},"to":{"krate":0,"index":85}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":30700,"byte_end":30714,"line_start":104,"line_end":104,"column_start":38,"column_end":52},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":641},"to":{"krate":0,"index":88}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\context\\mod.rs","byte_start":31361,"byte_end":31375,"line_start":121,"line_end":121,"column_start":38,"column_end":52},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":641},"to":{"krate":0,"index":90}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\display.rs","byte_start":47699,"byte_end":47712,"line_start":5,"line_end":5,"column_start":23,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":650},"to":{"krate":2,"index":9609}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":40843,"byte_end":40856,"line_start":210,"line_end":210,"column_start":6,"column_end":19},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":650},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\error\\mod.rs","byte_start":46318,"byte_end":46331,"line_start":365,"line_end":365,"column_start":28,"column_end":41},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":650},"to":{"krate":1,"index":2452}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":53293,"byte_end":53294,"line_start":16,"line_end":16,"column_start":24,"column_end":25},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":224},"to":{"krate":0,"index":221}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":53994,"byte_end":54002,"line_start":45,"line_end":45,"column_start":16,"column_end":24},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":2645}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":54123,"byte_end":54131,"line_start":53,"line_end":53,"column_start":6,"column_end":14},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":54600,"byte_end":54608,"line_start":73,"line_end":73,"column_start":21,"column_end":29},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":9602}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":54900,"byte_end":54904,"line_start":81,"line_end":81,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":3024},"to":{"krate":0,"index":236}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":54907,"byte_end":54911,"line_start":81,"line_end":81,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":3036},"to":{"krate":0,"index":236}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\function\\mod.rs","byte_start":54939,"byte_end":54947,"line_start":83,"line_end":83,"column_start":24,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":226},"to":{"krate":0,"index":236}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\display.rs","byte_start":94292,"byte_end":94300,"line_start":7,"line_end":7,"column_start":18,"column_end":26},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":767},"to":{"krate":2,"index":9609}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\operator\\mod.rs","byte_start":77343,"byte_end":77351,"line_start":90,"line_end":90,"column_start":6,"column_end":14},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":767},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\display.rs","byte_start":110775,"byte_end":110780,"line_start":5,"line_end":5,"column_start":23,"column_end":28},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":838},"to":{"krate":2,"index":9609}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\display.rs","byte_start":112425,"byte_end":112437,"line_start":56,"line_end":56,"column_start":23,"column_end":35},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":918},"to":{"krate":2,"index":9609}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\token\\mod.rs","byte_start":98370,"byte_end":98375,"line_start":124,"line_end":124,"column_start":6,"column_end":11},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":838},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\display.rs","byte_start":143317,"byte_end":143321,"line_start":4,"line_end":4,"column_start":18,"column_end":22},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":959},"to":{"krate":2,"index":9609}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\iter.rs","byte_start":143698,"byte_end":143706,"line_start":9,"line_end":9,"column_start":10,"column_end":18},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":489},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\iter.rs","byte_start":143857,"byte_end":143865,"line_start":17,"line_end":17,"column_start":23,"column_end":31},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":489},"to":{"krate":2,"index":7914}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\iter.rs","byte_start":144541,"byte_end":144545,"line_start":43,"line_end":43,"column_start":6,"column_end":10},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":959},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\tree\\mod.rs","byte_start":114417,"byte_end":114421,"line_start":42,"line_end":42,"column_start":6,"column_end":10},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":959},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\display.rs","byte_start":151412,"byte_end":151417,"line_start":5,"line_end":5,"column_start":18,"column_end":23},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":994},"to":{"krate":2,"index":9609}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\value_type.rs","byte_start":152615,"byte_end":152624,"line_start":20,"line_end":20,"column_start":23,"column_end":32},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":970},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\value_type.rs","byte_start":153024,"byte_end":153033,"line_start":33,"line_end":33,"column_start":27,"column_end":36},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":970},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\value_type.rs","byte_start":153149,"byte_end":153158,"line_start":39,"line_end":39,"column_start":28,"column_end":37},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":970},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":145718,"byte_end":145723,"line_start":40,"line_end":40,"column_start":6,"column_end":11},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":994},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":149687,"byte_end":149692,"line_start":148,"line_end":148,"column_start":23,"column_end":28},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":994},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":149792,"byte_end":149797,"line_start":154,"line_end":154,"column_start":21,"column_end":26},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":994},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":149912,"byte_end":149917,"line_start":160,"line_end":160,"column_start":26,"column_end":31},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":994},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":150020,"byte_end":150025,"line_start":166,"line_end":166,"column_start":24,"column_end":29},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":994},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":150117,"byte_end":150122,"line_start":172,"line_end":172,"column_start":21,"column_end":26},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":994},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":150228,"byte_end":150233,"line_start":178,"line_end":178,"column_start":26,"column_end":31},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":994},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":150334,"byte_end":150348,"line_start":184,"line_end":184,"column_start":22,"column_end":36},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":157},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\test9\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\evalexpr-7.2.0\\src\\value\\mod.rs","byte_start":150439,"byte_end":150444,"line_start":190,"line_end":190,"column_start":19,"column_end":24},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":994},"to":{"krate":2,"index":2930}}]}